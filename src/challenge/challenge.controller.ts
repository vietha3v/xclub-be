import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query, 
  UseGuards, 
  Req,
  HttpCode,
  HttpStatus
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { ChallengeService } from './challenge.service';
import { CreateChallengeDto } from './dto/create-challenge.dto';
import { UpdateChallengeDto } from './dto/update-challenge.dto';
import { QueryChallengeDto } from './dto/query-challenge.dto';
import { Challenge, ChallengeStatus, ChallengeType } from './entities/challenge.entity';

@ApiTags('üèÜ Qu·∫£n l√Ω th·ª≠ th√°ch')
@Controller('challenges')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT-auth')
export class ChallengeController {
  constructor(private readonly challengeService: ChallengeService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ summary: 'T·∫°o th·ª≠ th√°ch m·ªõi' })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o th·ª≠ th√°ch th√†nh c√¥ng',
    type: Challenge
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async create(@Req() req, @Body() createChallengeDto: CreateChallengeDto): Promise<Challenge> {
    return this.challengeService.create(req.user.userId, createChallengeDto);
  }

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch th·ª≠ th√°ch v·ªõi ph√¢n trang v√† filter' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th·ª≠ th√°ch',
    schema: {
      type: 'object',
      properties: {
        challenges: { type: 'array', items: { $ref: '#/components/schemas/Challenge' } },
        total: { type: 'number', description: 'T·ªïng s·ªë th·ª≠ th√°ch' },
        page: { type: 'number', description: 'Trang hi·ªán t·∫°i' },
        limit: { type: 'number', description: 'S·ªë l∆∞·ª£ng m·ªói trang' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Query() queryDto: QueryChallengeDto) {
    return this.challengeService.findAll(queryDto);
  }

  @Get('stats')
  @ApiOperation({ summary: 'L·∫•y th·ªëng k√™ th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ th·ª≠ th√°ch',
    schema: {
      type: 'object',
      properties: {
        totalChallenges: { type: 'number', description: 'T·ªïng s·ªë th·ª≠ th√°ch' },
        activeChallenges: { type: 'number', description: 'S·ªë th·ª≠ th√°ch ƒëang ho·∫°t ƒë·ªông' },
        completedChallenges: { type: 'number', description: 'S·ªë th·ª≠ th√°ch ƒë√£ ho√†n th√†nh' },
        distanceChallenges: { type: 'number', description: 'S·ªë th·ª≠ th√°ch theo kho·∫£ng c√°ch' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getStats() {
    return this.challengeService.getStats();
  }

  @Get('search')
  @ApiOperation({ summary: 'T√¨m ki·∫øm th·ª≠ th√°ch' })
  @ApiQuery({ name: 'q', required: true, description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Challenge]
  })
  @ApiResponse({ status: 400, description: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async search(@Query('q') searchTerm: string, @Query('limit') limit: number = 10) {
    if (!searchTerm) {
      throw new Error('T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }
    return this.challengeService.search(searchTerm, limit);
  }

  @Get('club/:clubId')
  @ApiOperation({ summary: 'L·∫•y th·ª≠ th√°ch theo c√¢u l·∫°c b·ªô' })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th·ª≠ th√°ch theo c√¢u l·∫°c b·ªô',
    type: [Challenge]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByClub(@Param('clubId') clubId: string, @Query('limit') limit: number = 10) {
    return this.challengeService.findByClub(clubId, limit);
  }

  @Get('type/:type')
  @ApiOperation({ summary: 'L·∫•y th·ª≠ th√°ch theo lo·∫°i' })
  @ApiParam({ name: 'type', description: 'Lo·∫°i th·ª≠ th√°ch' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th·ª≠ th√°ch theo lo·∫°i',
    type: [Challenge]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByType(@Param('type') type: ChallengeType, @Query('limit') limit: number = 10) {
    return this.challengeService.findByType(type, limit);
  }

  @Get('code/:challengeCode')
  @ApiOperation({ summary: 'L·∫•y th·ª≠ th√°ch theo m√£' })
  @ApiParam({ name: 'challengeCode', description: 'M√£ th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th·ª≠ th√°ch',
    type: Challenge
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async findByCode(@Param('challengeCode') challengeCode: string): Promise<Challenge> {
    return this.challengeService.findByCode(challengeCode);
  }

  @Get(':id')
  @ApiOperation({ summary: 'L·∫•y th·ª≠ th√°ch theo ID' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th·ª≠ th√°ch',
    type: Challenge
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async findOne(@Param('id') id: string): Promise<Challenge> {
    return this.challengeService.findOne(id);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t th·ª≠ th√°ch' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Challenge
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string, 
    @Body() updateChallengeDto: UpdateChallengeDto
  ): Promise<Challenge> {
    return this.challengeService.update(id, updateChallengeDto);
  }

  @Patch(':id/status')
  @ApiOperation({ summary: 'Thay ƒë·ªïi tr·∫°ng th√°i th·ª≠ th√°ch' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng',
    type: Challenge
  })
  @ApiResponse({ status: 400, description: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async changeStatus(
    @Param('id') id: string, 
    @Body('status') status: ChallengeStatus
  ): Promise<Challenge> {
    return this.challengeService.changeStatus(id, status);
  }

  @Post(':id/join')
  @ApiOperation({ summary: 'ƒêƒÉng k√Ω tham gia th·ª≠ th√°ch' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
    type: Challenge
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ ƒëƒÉng k√Ω tham gia' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  @ApiResponse({ status: 409, description: 'ƒê√£ tham gia th·ª≠ th√°ch n√†y' })
  async joinChallenge(@Req() req, @Param('id') id: string): Promise<Challenge> {
    return this.challengeService.joinChallenge(id, req.user.userId);
  }

  @Post(':id/leave')
  @ApiOperation({ summary: 'R√∫t lui kh·ªèi th·ª≠ th√°ch' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'R√∫t lui th√†nh c√¥ng',
    type: Challenge
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ r√∫t lui' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async leaveChallenge(@Req() req, @Param('id') id: string): Promise<Challenge> {
    return this.challengeService.leaveChallenge(id, req.user.userId);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'X√≥a th·ª≠ th√°ch (x√≥a m·ªÅm)' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th·ª≠ th√°ch' })
  @ApiResponse({ status: 200, description: 'X√≥a th√†nh c√¥ng' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Th·ª≠ th√°ch kh√¥ng t·ªìn t·∫°i' })
  async remove(@Req() req, @Param('id') id: string): Promise<void> {
    return this.challengeService.remove(id, req.user.userId);
  }
}
