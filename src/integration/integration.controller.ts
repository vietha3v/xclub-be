import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
  Request,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { IntegrationService } from './integration.service';
import { Integration, IntegrationType, IntegrationProvider } from './entities/integration.entity';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';

@ApiTags('üîó Qu·∫£n l√Ω t√≠ch h·ª£p')
@Controller('integrations')
@ApiBearerAuth('JWT-auth')
export class IntegrationController {
  constructor(private readonly integrationService: IntegrationService) {}

  /**
   * L·∫•y URL OAuth ƒë·ªÉ k·∫øt n·ªëi v·ªõi Strava
   */
  @Get('strava/authorize')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'L·∫•y URL OAuth Strava',
    description: 'L·∫•y URL ƒë·ªÉ ng∆∞·ªùi d√πng k·∫øt n·ªëi v·ªõi Strava'
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'URL OAuth th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        authUrl: { type: 'string' },
        state: { type: 'string' }
      }
    }
  })
  async getStravaAuthUrl(@Request() req: any): Promise<{ success: boolean; authUrl: string; state: string }> {
    const userId = req.user.userId;
    return this.integrationService.getStravaAuthUrl(userId);
  }

  /**
   * X·ª≠ l√Ω callback t·ª´ Strava OAuth
   */
  @Post('strava/callback')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'X·ª≠ l√Ω callback OAuth Strava',
    description: 'X·ª≠ l√Ω callback t·ª´ Strava sau khi ng∆∞·ªùi d√πng authorize'
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'K·∫øt n·ªëi th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        integration: { type: 'object' }
      }
    }
  })
  async handleStravaCallback(
    @Body() body: { code: string; state: string },
    @Request() req: any
  ): Promise<{ success: boolean; message: string; integration?: any }> {
    const userId = req.user.userId;
    return this.integrationService.handleStravaCallback(body.code, body.state, userId);
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi Strava
   */
  @Get('strava/status')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi Strava',
    description: 'Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ k·∫øt n·ªëi v·ªõi Strava ch∆∞a'
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Tr·∫°ng th√°i k·∫øt n·ªëi',
    schema: {
      type: 'object',
      properties: {
        connected: { type: 'boolean' },
        integration: { type: 'object' },
        tokenExpiry: { type: 'string' },
        error: { type: 'string' }
      }
    }
  })
  async getStravaStatus(@Request() req: any): Promise<{ connected: boolean; integration?: any; tokenExpiry?: Date; error?: string }> {
    const userId = req.user.userId;
    return this.integrationService.getStravaStatus(userId);
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi Strava
   */
  @Delete('strava/disconnect')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Ng·∫Øt k·∫øt n·ªëi Strava',
    description: 'Ng·∫Øt k·∫øt n·ªëi t√≠ch h·ª£p Strava c·ªßa ng∆∞·ªùi d√πng'
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' }
      }
    }
  })
  async disconnectStrava(@Request() req: any): Promise<{ success: boolean; message: string }> {
    const userId = req.user.userId;
    return this.integrationService.disconnectStrava(userId);
  }
}