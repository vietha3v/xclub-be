import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
  ForbiddenException,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { NotificationService } from './notification.service';
import { CreateNotificationDto } from './dto/create-notification.dto';
import { UpdateNotificationDto } from './dto/update-notification.dto';
import { QueryNotificationDto } from './dto/query-notification.dto';
import { SendNotificationDto } from './dto/send-notification.dto';
import { Notification, NotificationType, NotificationPriority, NotificationChannel } from './entities/notification.entity';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';

@ApiTags('üîî Qu·∫£n l√Ω th√¥ng b√°o')
@Controller('notifications')
@ApiBearerAuth('JWT-auth')
export class NotificationController {
  constructor(private readonly notificationService: NotificationService) {}

  /**
   * T·∫°o th√¥ng b√°o m·ªõi
   */
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o th√¥ng b√°o m·ªõi',
    description: 'T·∫°o th√¥ng b√°o m·ªõi trong h·ªá th·ªëng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o th√¥ng b√°o th√†nh c√¥ng',
    type: Notification
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o th√¥ng b√°o' })
  async create(@Body() createNotificationDto: CreateNotificationDto, @Req() req: any) {
    return this.notificationService.create(createNotificationDto, req.user.userId);
  }

  /**
   * L·∫•y danh s√°ch th√¥ng b√°o
   */
  @Get()
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch th√¥ng b√°o',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o v·ªõi ph√¢n trang v√† t√¨m ki·∫øm'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: { $ref: '#/components/schemas/Notification' }
        },
        total: { type: 'number' },
        page: { type: 'number' },
        limit: { type: 'number' },
        totalPages: { type: 'number' },
        hasNextPage: { type: 'boolean' },
        hasPreviousPage: { type: 'boolean' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Query() queryDto: QueryNotificationDto, @Req() req: any) {
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      queryDto.recipientId = req.user.userId;
    }
    return this.notificationService.findAll(queryDto);
  }

  /**
   * L·∫•y th√¥ng b√°o theo ID
   */
  @Get(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt th√¥ng b√°o'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th√¥ng b√°o',
    type: Notification
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async findOne(@Param('id') id: string, @Req() req: any) {
    const notification = await this.notificationService.findOne(id);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ ng∆∞·ªùi nh·∫≠n ho·∫∑c admin)
    if (notification.recipientId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o n√†y');
    }
    
    return notification;
  }

  /**
   * L·∫•y th√¥ng b√°o theo m√£
   */
  @Get('code/:notificationCode')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo m√£',
    description: 'L·∫•y th√¥ng tin th√¥ng b√°o theo m√£ th√¥ng b√°o'
  })
  @ApiParam({ name: 'notificationCode', description: 'M√£ th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th√¥ng b√°o',
    type: Notification
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async findByCode(@Param('notificationCode') notificationCode: string, @Req() req: any) {
    const notification = await this.notificationService.findByCode(notificationCode);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ ng∆∞·ªùi nh·∫≠n ho·∫∑c admin)
    if (notification.recipientId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o n√†y');
    }
    
    return notification;
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng b√°o
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t th√¥ng b√°o',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin th√¥ng b√°o (ch·ªâ ng∆∞·ªùi g·ª≠i ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Notification
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async update(
    @Param('id') id: string, 
    @Body() updateNotificationDto: UpdateNotificationDto,
    @Req() req: any
  ) {
    return this.notificationService.update(id, updateNotificationDto, req.user.userId);
  }

  /**
   * X√≥a th√¥ng b√°o
   */
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a th√¥ng b√°o',
    description: 'X√≥a th√¥ng b√°o (ch·ªâ ng∆∞·ªùi nh·∫≠n, ng∆∞·ªùi g·ª≠i ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async remove(@Param('id') id: string, @Req() req: any) {
    await this.notificationService.remove(id, req.user.userId);
    return { message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng' };
  }

  /**
   * G·ª≠i th√¥ng b√°o
   */
  @Post('send')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'G·ª≠i th√¥ng b√°o',
    description: 'G·ª≠i th√¥ng b√°o ƒë·∫øn nhi·ªÅu ng∆∞·ªùi d√πng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'G·ª≠i th√¥ng b√°o th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        totalSent: { type: 'number' },
        totalFailed: { type: 'number' },
        details: { type: 'array' },
        message: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn g·ª≠i th√¥ng b√°o' })
  async sendNotification(@Body() sendDto: SendNotificationDto, @Req() req: any) {
    return this.notificationService.sendNotification(sendDto, req.user.userId);
  }

  /**
   * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
   */
  @Patch(':id/read')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc',
    description: 'ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë·ªçc'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√†nh c√¥ng',
    type: Notification
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn ƒë·ªçc th√¥ng b√°o n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async markAsRead(@Param('id') id: string, @Req() req: any) {
    return this.notificationService.markAsRead(id, req.user.userId);
  }

  /**
   * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
   */
  @Patch('mark-all-read')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc',
    description: 'ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ƒë·ªçc'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        count: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async markAllAsRead(@Req() req: any) {
    return this.notificationService.markAllAsRead(req.user.userId);
  }

  /**
   * L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
   */
  @Get('unread')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa ng∆∞·ªùi d√πng'
  })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng th√¥ng b√°o (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o ch∆∞a ƒë·ªçc',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getUnreadNotifications(@Req() req: any, @Query('limit') limit?: number) {
    return this.notificationService.getUnreadNotifications(req.user.userId, limit);
  }

  /**
   * L·∫•y th√¥ng b√°o theo lo·∫°i
   */
  @Get('type/:type')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo lo·∫°i',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o theo lo·∫°i c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'type', description: 'Lo·∫°i th√¥ng b√°o', enum: NotificationType })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o theo lo·∫°i',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByType(@Param('type') type: NotificationType, @Req() req: any) {
    const notifications = await this.notificationService.findByType(type);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return notifications.filter(n => n.recipientId === req.user.userId);
    }
    
    return notifications;
  }

  /**
   * L·∫•y th√¥ng b√°o theo ng∆∞·ªùi nh·∫≠n
   */
  @Get('recipient/:recipientId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo ng∆∞·ªùi nh·∫≠n',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o c·ªßa m·ªôt ng∆∞·ªùi nh·∫≠n'
  })
  @ApiParam({ name: 'recipientId', description: 'ID c·ªßa ng∆∞·ªùi nh·∫≠n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o theo ng∆∞·ªùi nh·∫≠n',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o c·ªßa ng∆∞·ªùi kh√°c' })
  async findByRecipient(@Param('recipientId') recipientId: string, @Req() req: any) {
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem th√¥ng b√°o c·ªßa m√¨nh ho·∫∑c admin)
    if (recipientId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o c·ªßa ng∆∞·ªùi kh√°c');
    }
    
    return this.notificationService.findByRecipient(recipientId);
  }

  /**
   * L·∫•y th√¥ng b√°o theo ng∆∞·ªùi g·ª≠i
   */
  @Get('sender/:senderId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo ng∆∞·ªùi g·ª≠i',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o do m·ªôt ng∆∞·ªùi g·ª≠i'
  })
  @ApiParam({ name: 'senderId', description: 'ID c·ªßa ng∆∞·ªùi g·ª≠i' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o theo ng∆∞·ªùi g·ª≠i',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o c·ªßa ng∆∞·ªùi kh√°c' })
  async findBySender(@Param('senderId') senderId: string, @Req() req: any) {
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem th√¥ng b√°o c·ªßa m√¨nh ho·∫∑c admin)
    if (senderId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o c·ªßa ng∆∞·ªùi kh√°c');
    }
    
    return this.notificationService.findBySender(senderId);
  }

  /**
   * L·∫•y th√¥ng b√°o theo CLB
   */
  @Get('club/:clubId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo CLB',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o c·ªßa m·ªôt CLB'
  })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa CLB' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o theo CLB',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByClub(@Param('clubId') clubId: string) {
    return this.notificationService.findByClub(clubId);
  }

  /**
   * L·∫•y th·ªëng k√™ th√¥ng b√°o
   */
  @Get('stats/overview')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ t·ªïng quan',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ th√¥ng b√°o (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ t·ªïng quan',
    schema: {
      type: 'object',
      properties: {
        totalNotifications: { type: 'number' },
        sentNotifications: { type: 'number' },
        deliveredNotifications: { type: 'number' },
        readNotifications: { type: 'number' },
        failedNotifications: { type: 'number' },
        typeBreakdown: { type: 'object' },
        channelBreakdown: { type: 'object' },
        priorityBreakdown: { type: 'object' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' })
  async getStats() {
    return this.notificationService.getStats();
  }

  /**
   * T√¨m ki·∫øm th√¥ng b√°o
   */
  @Get('search')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm th√¥ng b√°o',
    description: 'T√¨m ki·∫øm th√¥ng b√°o theo t·ª´ kh√≥a'
  })
  @ApiQuery({ name: 'q', description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async search(
    @Query('q') query: string,
    @Req() req: any,
    @Query('limit') limit?: number
  ) {
    const notifications = await this.notificationService.search(query, limit);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return notifications.filter(n => n.recipientId === req.user.userId);
    }
    
    return notifications;
  }

  /**
   * L·∫•y th√¥ng b√°o theo tags
   */
  @Get('tags')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o theo tags',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o theo tags'
  })
  @ApiQuery({ name: 'tags', description: 'Danh s√°ch tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o theo tags',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByTags(@Query('tags') tags: string, @Req() req: any) {
    const tagArray = tags.split(',').map(tag => tag.trim());
    const notifications = await this.notificationService.findByTags(tagArray);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return notifications.filter(n => n.recipientId === req.user.userId);
    }
    
    return notifications;
  }

  /**
   * L·∫•y th√¥ng b√°o th·∫•t b·∫°i
   */
  @Get('failed')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng b√°o th·∫•t b·∫°i',
    description: 'L·∫•y danh s√°ch th√¥ng b√°o g·ª≠i th·∫•t b·∫°i (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√¥ng b√°o th·∫•t b·∫°i',
    type: [Notification]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th√¥ng b√°o th·∫•t b·∫°i' })
  async getFailedNotifications() {
    return this.notificationService.getFailedNotifications();
  }

  /**
   * Th·ª≠ g·ª≠i l·∫°i th√¥ng b√°o th·∫•t b·∫°i
   */
  @Patch(':id/retry')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'Th·ª≠ g·ª≠i l·∫°i th√¥ng b√°o th·∫•t b·∫°i',
    description: 'Th·ª≠ g·ª≠i l·∫°i th√¥ng b√°o ƒë√£ g·ª≠i th·∫•t b·∫°i (ch·ªâ admin/moderator)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√¥ng b√°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ª≠ g·ª≠i l·∫°i th√†nh c√¥ng',
    type: Notification
  })
  @ApiResponse({ status: 400, description: 'Th√¥ng b√°o kh√¥ng ·ªü tr·∫°ng th√°i th·∫•t b·∫°i' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn th·ª≠ g·ª≠i l·∫°i' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' })
  async retryFailedNotification(@Param('id') id: string) {
    return this.notificationService.retryFailedNotification(id);
  }
}
