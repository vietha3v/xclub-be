import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { SocialService, SocialPost, SocialComment, SocialLike, SocialFollow, SocialFeed, SocialStats } from './social.service';

@ApiTags('üë• T∆∞∆°ng t√°c x√£ h·ªôi')
@Controller('social')
@ApiBearerAuth('JWT-auth')
export class SocialController {
  constructor(private readonly socialService: SocialService) {}

  /**
   * L·∫•y feed ho·∫°t ƒë·ªông
   */
  @Get('feed')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y feed ho·∫°t ƒë·ªông',
    description: 'L·∫•y feed ho·∫°t ƒë·ªông c·ªßa b·∫°n b√® v√† ng∆∞·ªùi ƒëang follow'
  })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng b√†i vi·∫øt (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Feed ho·∫°t ƒë·ªông',
    schema: {
      type: 'object',
      properties: {
        posts: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getFeed(
    @Req() req: any,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<SocialFeed> {
    return this.socialService.getFeed(req.user.userId, cursor, limit);
  }

  /**
   * T·∫°o b√†i vi·∫øt m·ªõi
   */
  @Post('posts')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o b√†i vi·∫øt m·ªõi',
    description: 'T·∫°o b√†i vi·∫øt m·ªõi ƒë·ªÉ chia s·∫ª v·ªõi c·ªông ƒë·ªìng'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o b√†i vi·∫øt th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async createPost(@Body() postData: any, @Req() req: any): Promise<SocialPost> {
    return this.socialService.createPost(req.user.userId, postData);
  }

  /**
   * C·∫≠p nh·∫≠t b√†i vi·∫øt
   */
  @Patch('posts/:postId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t b√†i vi·∫øt',
    description: 'C·∫≠p nh·∫≠t n·ªôi dung b√†i vi·∫øt'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i vi·∫øt n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async updatePost(
    @Param('postId') postId: string,
    @Body() updateData: any,
    @Req() req: any
  ): Promise<SocialPost> {
    return this.socialService.updatePost(postId, req.user.userId, updateData);
  }

  /**
   * X√≥a b√†i vi·∫øt
   */
  @Delete('posts/:postId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a b√†i vi·∫øt',
    description: 'X√≥a b√†i vi·∫øt v√† t·∫•t c·∫£ t∆∞∆°ng t√°c li√™n quan'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a b√†i vi·∫øt th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async deletePost(@Param('postId') postId: string, @Req() req: any): Promise<{ message: string }> {
    await this.socialService.deletePost(postId, req.user.userId);
    return { message: 'X√≥a b√†i vi·∫øt th√†nh c√¥ng' };
  }

  /**
   * Like/Unlike b√†i vi·∫øt
   */
  @Post('posts/:postId/like')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Like/Unlike b√†i vi·∫øt',
    description: 'Like ho·∫∑c unlike b√†i vi·∫øt'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 200, 
    description: 'Like/Unlike th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        liked: { type: 'boolean' },
        likes: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async toggleLike(
    @Param('postId') postId: string,
    @Body() body: { type?: string },
    @Req() req: any
  ): Promise<{ liked: boolean; likes: number }> {
    return this.socialService.toggleLike(postId, req.user.userId, body.type);
  }

  /**
   * Th√™m comment
   */
  @Post('posts/:postId/comments')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Th√™m comment',
    description: 'Th√™m comment v√†o b√†i vi·∫øt'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 201, 
    description: 'Th√™m comment th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async addComment(
    @Param('postId') postId: string,
    @Body() body: { content: string; parentId?: string },
    @Req() req: any
  ): Promise<SocialComment> {
    return this.socialService.addComment(postId, req.user.userId, body.content, body.parentId);
  }

  /**
   * C·∫≠p nh·∫≠t comment
   */
  @Patch('comments/:commentId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t comment',
    description: 'C·∫≠p nh·∫≠t n·ªôi dung comment'
  })
  @ApiParam({ name: 'commentId', description: 'ID c·ªßa comment' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t comment th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t comment n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y comment' })
  async updateComment(
    @Param('commentId') commentId: string,
    @Body() body: { content: string },
    @Req() req: any
  ): Promise<SocialComment> {
    return this.socialService.updateComment(commentId, req.user.userId, body.content);
  }

  /**
   * X√≥a comment
   */
  @Delete('comments/:commentId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a comment',
    description: 'X√≥a comment v√† replies li√™n quan'
  })
  @ApiParam({ name: 'commentId', description: 'ID c·ªßa comment' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a comment th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a comment n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y comment' })
  async deleteComment(@Param('commentId') commentId: string, @Req() req: any): Promise<{ message: string }> {
    await this.socialService.deleteComment(commentId, req.user.userId);
    return { message: 'X√≥a comment th√†nh c√¥ng' };
  }

  /**
   * Like/Unlike comment
   */
  @Post('comments/:commentId/like')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Like/Unlike comment',
    description: 'Like ho·∫∑c unlike comment'
  })
  @ApiParam({ name: 'commentId', description: 'ID c·ªßa comment' })
  @ApiResponse({ 
    status: 200, 
    description: 'Like/Unlike comment th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        liked: { type: 'boolean' },
        likes: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y comment' })
  async toggleCommentLike(
    @Param('commentId') commentId: string,
    @Req() req: any
  ): Promise<{ liked: boolean; likes: number }> {
    return this.socialService.toggleCommentLike(commentId, req.user.userId);
  }

  /**
   * Chia s·∫ª b√†i vi·∫øt
   */
  @Post('posts/:postId/share')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Chia s·∫ª b√†i vi·∫øt',
    description: 'Chia s·∫ª b√†i vi·∫øt v·ªõi message t√πy ch·ªânh'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 201, 
    description: 'Chia s·∫ª b√†i vi·∫øt th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async sharePost(
    @Param('postId') postId: string,
    @Body() body: { message?: string },
    @Req() req: any
  ): Promise<SocialPost> {
    return this.socialService.sharePost(postId, req.user.userId, body.message);
  }

  /**
   * Follow ng∆∞·ªùi d√πng
   */
  @Post('users/:userId/follow')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Follow ng∆∞·ªùi d√πng',
    description: 'Follow ng∆∞·ªùi d√πng ƒë·ªÉ xem ho·∫°t ƒë·ªông c·ªßa h·ªç'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 201, 
    description: 'Follow ng∆∞·ªùi d√πng th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ follow ch√≠nh m√¨nh' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async followUser(
    @Param('userId') userId: string,
    @Req() req: any
  ): Promise<SocialFollow> {
    return this.socialService.followUser(req.user.userId, userId);
  }

  /**
   * Unfollow ng∆∞·ªùi d√πng
   */
  @Delete('users/:userId/follow')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'Unfollow ng∆∞·ªùi d√πng',
    description: 'Unfollow ng∆∞·ªùi d√πng'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'Unfollow ng∆∞·ªùi d√πng th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async unfollowUser(@Param('userId') userId: string, @Req() req: any): Promise<{ message: string }> {
    await this.socialService.unfollowUser(req.user.userId, userId);
    return { message: 'Unfollow ng∆∞·ªùi d√πng th√†nh c√¥ng' };
  }

  /**
   * Ch·∫•p nh·∫≠n/t·ª´ ch·ªëi follow request
   */
  @Patch('follows/:followId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'Ch·∫•p nh·∫≠n/t·ª´ ch·ªëi follow request',
    description: 'Ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi follow request'
  })
  @ApiParam({ name: 'followId', description: 'ID c·ªßa follow request' })
  @ApiResponse({ 
    status: 200, 
    description: 'X·ª≠ l√Ω follow request th√†nh c√¥ng',
    schema: { type: 'object' }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω follow request n√†y' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y follow request' })
  async respondToFollowRequest(
    @Param('followId') followId: string,
    @Body() body: { accept: boolean },
    @Req() req: any
  ): Promise<SocialFollow> {
    return this.socialService.respondToFollowRequest(followId, req.user.userId, body.accept);
  }

  /**
   * L·∫•y danh s√°ch follower
   */
  @Get('users/:userId/followers')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch follower',
    description: 'L·∫•y danh s√°ch ng∆∞·ªùi theo d√µi'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng follower (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch follower',
    schema: {
      type: 'object',
      properties: {
        followers: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async getFollowers(
    @Param('userId') userId: string,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<{ followers: SocialFollow[]; hasMore: boolean; nextCursor?: string }> {
    return this.socialService.getFollowers(userId, cursor, limit);
  }

  /**
   * L·∫•y danh s√°ch following
   */
  @Get('users/:userId/following')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch following',
    description: 'L·∫•y danh s√°ch ng∆∞·ªùi ƒëang theo d√µi'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng following (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch following',
    schema: {
      type: 'object',
      properties: {
        following: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async getFollowing(
    @Param('userId') userId: string,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<{ following: SocialFollow[]; hasMore: boolean; nextCursor?: string }> {
    return this.socialService.getFollowing(userId, cursor, limit);
  }

  /**
   * T√¨m ki·∫øm ng∆∞·ªùi d√πng
   */
  @Get('users/search')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm ng∆∞·ªùi d√πng',
    description: 'T√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n'
  })
  @ApiQuery({ name: 'q', description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi d√πng',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          avatar: { type: 'string' },
          isFollowing: { type: 'boolean' },
          mutualFriends: { type: 'number' }
        }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async searchUsers(
    @Query('q') query: string,
    @Req() req: any,
    @Query('limit') limit?: number
  ): Promise<Array<{ id: string; name: string; avatar?: string; isFollowing: boolean; mutualFriends: number }>> {
    return this.socialService.searchUsers(query, req.user.userId, limit);
  }

  /**
   * L·∫•y g·ª£i √Ω k·∫øt b·∫°n
   */
  @Get('users/suggestions')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y g·ª£i √Ω k·∫øt b·∫°n',
    description: 'L·∫•y danh s√°ch g·ª£i √Ω k·∫øt b·∫°n d·ª±a tr√™n b·∫°n chung v√† s·ªü th√≠ch'
  })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng g·ª£i √Ω (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch g·ª£i √Ω k·∫øt b·∫°n',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          avatar: { type: 'string' },
          mutualFriends: { type: 'number' },
          reason: { type: 'string' }
        }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getFriendSuggestions(
    @Req() req: any,
    @Query('limit') limit?: number
  ): Promise<Array<{ id: string; name: string; avatar?: string; mutualFriends: number; reason: string }>> {
    return this.socialService.getFriendSuggestions(req.user.userId, limit);
  }

  /**
   * L·∫•y th·ªëng k√™ x√£ h·ªôi
   */
  @Get('users/:userId/stats')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ x√£ h·ªôi',
    description: 'L·∫•y th·ªëng k√™ v·ªÅ ho·∫°t ƒë·ªông x√£ h·ªôi c·ªßa ng∆∞·ªùi d√πng'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ x√£ h·ªôi',
    schema: {
      type: 'object',
      properties: {
        totalPosts: { type: 'number' },
        totalLikes: { type: 'number' },
        totalComments: { type: 'number' },
        totalShares: { type: 'number' },
        totalFollowers: { type: 'number' },
        totalFollowing: { type: 'number' },
        postsThisMonth: { type: 'number' },
        likesThisMonth: { type: 'number' },
        commentsThisMonth: { type: 'number' },
        sharesThisMonth: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async getSocialStats(@Param('userId') userId: string): Promise<SocialStats> {
    return this.socialService.getSocialStats(userId);
  }

  /**
   * L·∫•y b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng
   */
  @Get('users/:userId/posts')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng',
    description: 'L·∫•y danh s√°ch b√†i vi·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng b√†i vi·∫øt (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng',
    schema: {
      type: 'object',
      properties: {
        posts: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async getUserPosts(
    @Param('userId') userId: string,
    @Req() req: any,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<SocialFeed> {
    return this.socialService.getUserPosts(req.user.userId, userId, cursor, limit);
  }

  /**
   * L·∫•y comment c·ªßa b√†i vi·∫øt
   */
  @Get('posts/:postId/comments')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y comment c·ªßa b√†i vi·∫øt',
    description: 'L·∫•y danh s√°ch comment c·ªßa m·ªôt b√†i vi·∫øt'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng comment (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch comment c·ªßa b√†i vi·∫øt',
    schema: {
      type: 'object',
      properties: {
        comments: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async getPostComments(
    @Param('postId') postId: string,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<{ comments: SocialComment[]; hasMore: boolean; nextCursor?: string }> {
    return this.socialService.getPostComments(postId, cursor, limit);
  }

  /**
   * L·∫•y like c·ªßa b√†i vi·∫øt
   */
  @Get('posts/:postId/likes')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y like c·ªßa b√†i vi·∫øt',
    description: 'L·∫•y danh s√°ch like c·ªßa m·ªôt b√†i vi·∫øt'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiQuery({ name: 'cursor', required: false, description: 'Cursor ƒë·ªÉ ph√¢n trang' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng like (m·∫∑c ƒë·ªãnh 20)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch like c·ªßa b√†i vi·∫øt',
    schema: {
      type: 'object',
      properties: {
        likes: { type: 'array', items: { type: 'object' } },
        hasMore: { type: 'boolean' },
        nextCursor: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async getPostLikes(
    @Param('postId') postId: string,
    @Query('cursor') cursor?: string,
    @Query('limit') limit?: number
  ): Promise<{ likes: SocialLike[]; hasMore: boolean; nextCursor?: string }> {
    return this.socialService.getPostLikes(postId, cursor, limit);
  }

  /**
   * B√°o c√°o b√†i vi·∫øt
   */
  @Post('posts/:postId/report')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'B√°o c√°o b√†i vi·∫øt',
    description: 'B√°o c√°o b√†i vi·∫øt vi ph·∫°m quy ƒë·ªãnh'
  })
  @ApiParam({ name: 'postId', description: 'ID c·ªßa b√†i vi·∫øt' })
  @ApiResponse({ 
    status: 200, 
    description: 'B√°o c√°o b√†i vi·∫øt th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' })
  async reportPost(
    @Param('postId') postId: string,
    @Body() body: { reason: string; description?: string },
    @Req() req: any
  ): Promise<{ message: string }> {
    await this.socialService.reportPost(postId, req.user.userId, body.reason, body.description);
    return { message: 'B√°o c√°o b√†i vi·∫øt th√†nh c√¥ng' };
  }

  /**
   * Ch·∫∑n ng∆∞·ªùi d√πng
   */
  @Post('users/:userId/block')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Ch·∫∑n ng∆∞·ªùi d√πng',
    description: 'Ch·∫∑n ng∆∞·ªùi d√πng ƒë·ªÉ kh√¥ng th·∫•y ho·∫°t ƒë·ªông c·ªßa h·ªç'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'Ch·∫∑n ng∆∞·ªùi d√πng th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ ch·∫∑n ch√≠nh m√¨nh' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async blockUser(@Param('userId') userId: string, @Req() req: any): Promise<{ message: string }> {
    await this.socialService.blockUser(req.user.userId, userId);
    return { message: 'Ch·∫∑n ng∆∞·ªùi d√πng th√†nh c√¥ng' };
  }

  /**
   * B·ªè ch·∫∑n ng∆∞·ªùi d√πng
   */
  @Delete('users/:userId/block')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'B·ªè ch·∫∑n ng∆∞·ªùi d√πng',
    description: 'B·ªè ch·∫∑n ng∆∞·ªùi d√πng'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'B·ªè ch·∫∑n ng∆∞·ªùi d√πng th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async unblockUser(@Param('userId') userId: string, @Req() req: any): Promise<{ message: string }> {
    await this.socialService.unblockUser(req.user.userId, userId);
    return { message: 'B·ªè ch·∫∑n ng∆∞·ªùi d√πng th√†nh c√¥ng' };
  }

  /**
   * L·∫•y danh s√°ch ng∆∞·ªùi b·ªã ch·∫∑n
   */
  @Get('users/blocked')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch ng∆∞·ªùi b·ªã ch·∫∑n',
    description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ b·ªã ch·∫∑n'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ng∆∞·ªùi b·ªã ch·∫∑n',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          avatar: { type: 'string' },
          blockedAt: { type: 'string', format: 'date-time' }
        }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getBlockedUsers(@Req() req: any): Promise<Array<{ id: string; name: string; avatar?: string; blockedAt: Date }>> {
    return this.socialService.getBlockedUsers(req.user.userId);
  }
}
