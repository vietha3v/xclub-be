import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { AchievementService } from './achievement.service';
import { CreateAchievementDto } from './dto/create-achievement.dto';
import { UpdateAchievementDto } from './dto/update-achievement.dto';
import { QueryAchievementDto } from './dto/query-achievement.dto';
import { AwardAchievementDto } from './dto/award-achievement.dto';
import { Achievement, AchievementType, AchievementTier } from './entities/achievement.entity';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';

@ApiTags('üèÜ Qu·∫£n l√Ω th√†nh t√≠ch')
@Controller('achievements')
@ApiBearerAuth('JWT-auth')
export class AchievementController {
  constructor(private readonly achievementService: AchievementService) {}

  /**
   * T·∫°o th√†nh t√≠ch m·ªõi
   */
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o th√†nh t√≠ch m·ªõi',
    description: 'T·∫°o th√†nh t√≠ch m·ªõi trong h·ªá th·ªëng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o th√†nh t√≠ch th√†nh c√¥ng',
    type: Achievement
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o th√†nh t√≠ch' })
  async create(@Body() createAchievementDto: CreateAchievementDto, @Req() req: any) {
    return this.achievementService.create(createAchievementDto, req.user.userId);
  }

  /**
   * L·∫•y danh s√°ch th√†nh t√≠ch
   */
  @Get()
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch th√†nh t√≠ch',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch v·ªõi ph√¢n trang v√† t√¨m ki·∫øm'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: { $ref: '#/components/schemas/Achievement' }
        },
        total: { type: 'number' },
        page: { type: 'number' },
        limit: { type: 'number' },
        totalPages: { type: 'number' },
        hasNextPage: { type: 'boolean' },
        hasPreviousPage: { type: 'boolean' }
      }
    }
  })
  async findAll(@Query() queryDto: QueryAchievementDto) {
    return this.achievementService.findAll(queryDto);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo ID
   */
  @Get(':id')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt th√†nh t√≠ch'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√†nh t√≠ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th√†nh t√≠ch',
    type: Achievement
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√†nh t√≠ch' })
  async findOne(@Param('id') id: string) {
    return this.achievementService.findOne(id);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo m√£
   */
  @Get('code/:achievementCode')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo m√£',
    description: 'L·∫•y th√¥ng tin th√†nh t√≠ch theo m√£ th√†nh t√≠ch'
  })
  @ApiParam({ name: 'achievementCode', description: 'M√£ th√†nh t√≠ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin th√†nh t√≠ch',
    type: Achievement
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√†nh t√≠ch' })
  async findByCode(@Param('achievementCode') achievementCode: string) {
    return this.achievementService.findByCode(achievementCode);
  }

  /**
   * C·∫≠p nh·∫≠t th√†nh t√≠ch
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t th√†nh t√≠ch',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh t√≠ch (ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√†nh t√≠ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Achievement
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√†nh t√≠ch' })
  async update(
    @Param('id') id: string, 
    @Body() updateAchievementDto: UpdateAchievementDto,
    @Req() req: any
  ) {
    return this.achievementService.update(id, updateAchievementDto, req.user.userId);
  }

  /**
   * X√≥a th√†nh t√≠ch
   */
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a th√†nh t√≠ch',
    description: 'X√≥a th√†nh t√≠ch (ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa th√†nh t√≠ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y th√†nh t√≠ch' })
  async remove(@Param('id') id: string, @Req() req: any) {
    await this.achievementService.remove(id, req.user.userId);
    return { message: 'X√≥a th√†nh t√≠ch th√†nh c√¥ng' };
  }

  /**
   * L·∫•y th√†nh t√≠ch theo lo·∫°i
   */
  @Get('type/:type')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo lo·∫°i',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch theo lo·∫°i c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'type', description: 'Lo·∫°i th√†nh t√≠ch', enum: AchievementType })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch theo lo·∫°i',
    type: [Achievement]
  })
  async findByType(@Param('type') type: AchievementType) {
    return this.achievementService.findByType(type);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo c·∫•p ƒë·ªô
   */
  @Get('tier/:tier')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo c·∫•p ƒë·ªô',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch theo c·∫•p ƒë·ªô c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'tier', description: 'C·∫•p ƒë·ªô th√†nh t√≠ch', enum: AchievementTier })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch theo c·∫•p ƒë·ªô',
    type: [Achievement]
  })
  async findByTier(@Param('tier') tier: AchievementTier) {
    return this.achievementService.findByTier(tier);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo CLB
   */
  @Get('club/:clubId')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo CLB',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch c·ªßa m·ªôt CLB'
  })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa CLB' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch c·ªßa CLB',
    type: [Achievement]
  })
  async findByClub(@Param('clubId') clubId: string) {
    return this.achievementService.findByClub(clubId);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo ng∆∞·ªùi t·∫°o
   */
  @Get('creator/:createdBy')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo ng∆∞·ªùi t·∫°o',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch do m·ªôt ng∆∞·ªùi t·∫°o'
  })
  @ApiParam({ name: 'createdBy', description: 'ID c·ªßa ng∆∞·ªùi t·∫°o' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch theo ng∆∞·ªùi t·∫°o',
    type: [Achievement]
  })
  async findByCreator(@Param('createdBy') createdBy: string) {
    return this.achievementService.findByCreator(createdBy);
  }

  /**
   * L·∫•y th√†nh t√≠ch ph·ªï bi·∫øn
   */
  @Get('popular')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch ph·ªï bi·∫øn',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch ph·ªï bi·∫øn nh·∫•t'
  })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng th√†nh t√≠ch (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch ph·ªï bi·∫øn',
    type: [Achievement]
  })
  async getPopular(@Query('limit') limit?: number) {
    return this.achievementService.getPopularAchievements(limit);
  }

  /**
   * L·∫•y th√†nh t√≠ch m·ªõi nh·∫•t
   */
  @Get('latest')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch m·ªõi nh·∫•t',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch m·ªõi nh·∫•t'
  })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng th√†nh t√≠ch (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch m·ªõi nh·∫•t',
    type: [Achievement]
  })
  async getLatest(@Query('limit') limit?: number) {
    return this.achievementService.getLatestAchievements(limit);
  }

  /**
   * L·∫•y th·ªëng k√™ th√†nh t√≠ch
   */
  @Get('stats/overview')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ t·ªïng quan',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ th√†nh t√≠ch'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ t·ªïng quan',
    schema: {
      type: 'object',
      properties: {
        totalAchievements: { type: 'number' },
        activeAchievements: { type: 'number' },
        inactiveAchievements: { type: 'number' },
        typeBreakdown: { type: 'object' },
        tierBreakdown: { type: 'object' },
        totalPoints: { type: 'number' },
        averagePoints: { type: 'number' }
      }
    }
  })
  async getStats() {
    return this.achievementService.getStats();
  }

  /**
   * L·∫•y ti·∫øn ƒë·ªô th√†nh t√≠ch c·ªßa ng∆∞·ªùi d√πng
   */
  @Get('user/:userId/progress')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y ti·∫øn ƒë·ªô th√†nh t√≠ch c·ªßa ng∆∞·ªùi d√πng',
    description: 'L·∫•y ti·∫øn ƒë·ªô ho√†n th√†nh th√†nh t√≠ch c·ªßa m·ªôt ng∆∞·ªùi d√πng'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'Ti·∫øn ƒë·ªô th√†nh t√≠ch c·ªßa ng∆∞·ªùi d√πng',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          achievementId: { type: 'string' },
          achievementCode: { type: 'string' },
          name: { type: 'string' },
          type: { type: 'string' },
          tier: { type: 'string' },
          targetValue: { type: 'number' },
          currentValue: { type: 'number' },
          progress: { type: 'number' },
          isCompleted: { type: 'boolean' },
          completedAt: { type: 'string', format: 'date-time' },
          points: { type: 'number' }
        }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' })
  async getUserProgress(@Param('userId') userId: string) {
    return this.achievementService.getUserProgress(userId);
  }

  /**
   * L·∫•y ti·∫øn ƒë·ªô th√†nh t√≠ch c·ª• th·ªÉ c·ªßa ng∆∞·ªùi d√πng
   */
  @Get('user/:userId/progress/:achievementId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y ti·∫øn ƒë·ªô th√†nh t√≠ch c·ª• th·ªÉ',
    description: 'L·∫•y ti·∫øn ƒë·ªô ho√†n th√†nh c·ªßa m·ªôt th√†nh t√≠ch c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'userId', description: 'ID c·ªßa ng∆∞·ªùi d√πng' })
  @ApiParam({ name: 'achievementId', description: 'ID c·ªßa th√†nh t√≠ch' })
  @ApiResponse({ 
    status: 200, 
    description: 'Ti·∫øn ƒë·ªô th√†nh t√≠ch c·ª• th·ªÉ',
    schema: {
      type: 'object',
      properties: {
        achievementId: { type: 'string' },
        achievementCode: { type: 'string' },
        name: { type: 'string' },
        type: { type: 'string' },
        tier: { type: 'string' },
        targetValue: { type: 'number' },
        currentValue: { type: 'number' },
        progress: { type: 'number' },
        isCompleted: { type: 'boolean' },
        completedAt: { type: 'string', format: 'date-time' },
        points: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c th√†nh t√≠ch' })
  async getUserProgressSpecific(
    @Param('userId') userId: string,
    @Param('achievementId') achievementId: string
  ) {
    return this.achievementService.checkUserProgress(userId, achievementId);
  }

  /**
   * Trao th√†nh t√≠ch cho ng∆∞·ªùi d√πng
   */
  @Post('award')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Trao th√†nh t√≠ch cho ng∆∞·ªùi d√πng',
    description: 'Trao th√†nh t√≠ch cho ng∆∞·ªùi d√πng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'Trao th√†nh t√≠ch th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' },
        achievement: { type: 'object' },
        user: { type: 'object' },
        awardedAt: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn trao th√†nh t√≠ch' })
  async awardAchievement(@Body() awardDto: AwardAchievementDto) {
    return this.achievementService.awardAchievement(awardDto);
  }

  /**
   * T√¨m ki·∫øm th√†nh t√≠ch
   */
  @Get('search')
  @Public()
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm th√†nh t√≠ch',
    description: 'T√¨m ki·∫øm th√†nh t√≠ch theo t·ª´ kh√≥a'
  })
  @ApiQuery({ name: 'q', description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Achievement]
  })
  async search(
    @Query('q') query: string,
    @Query('limit') limit?: number
  ) {
    return this.achievementService.search(query, limit);
  }

  /**
   * L·∫•y th√†nh t√≠ch theo tags
   */
  @Get('tags')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th√†nh t√≠ch theo tags',
    description: 'L·∫•y danh s√°ch th√†nh t√≠ch theo tags'
  })
  @ApiQuery({ name: 'tags', description: 'Danh s√°ch tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch th√†nh t√≠ch theo tags',
    type: [Achievement]
  })
  async findByTags(@Query('tags') tags: string) {
    const tagArray = tags.split(',').map(tag => tag.trim());
    return this.achievementService.findByTags(tagArray);
  }
}
