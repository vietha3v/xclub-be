import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query, 
  UseGuards, 
  Req,
  HttpCode,
  HttpStatus
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBearerAuth, 
  ApiParam, 
  ApiQuery 
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { RaceService } from './race.service';
import { RaceParticipantService } from './services/race-participant.service';
import { RaceResultService } from './services/race-result.service';
import { CreateRaceDto } from './dto/create-race.dto';
import { UpdateRaceDto } from './dto/update-race.dto';
import { QueryRaceDto } from './dto/query-race.dto';
import { RegisterRaceDto } from './dto/register-race.dto';
import { Race, RaceType } from './entities/race.entity';
import { RaceParticipant, ParticipantStatus, PaymentStatus } from './entities/race-participant.entity';
import { RaceResult, ResultStatus, ResultSource } from './entities/race-result.entity';

@ApiTags('üèÅ Qu·∫£n l√Ω gi·∫£i ch·∫°y')
@Controller('races')
@ApiBearerAuth('JWT-auth')
export class RaceController {
  constructor(
    private readonly raceService: RaceService,
    private readonly participantService: RaceParticipantService,
    private readonly resultService: RaceResultService,
  ) {}

  /**
   * T·∫°o gi·∫£i ch·∫°y m·ªõi
   */
  @Post()
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o gi·∫£i ch·∫°y m·ªõi',
    description: 'T·∫°o m·ªôt gi·∫£i ch·∫°y m·ªõi trong h·ªá th·ªëng'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async create(@Body() createRaceDto: CreateRaceDto, @Req() req: any): Promise<Race> {
    return this.raceService.create(createRaceDto, req.user.userId);
  }

  /**
   * L·∫•y danh s√°ch gi·∫£i ch·∫°y v·ªõi ph√¢n trang v√† filter
   */
  @Get()
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y',
    description: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y v·ªõi ph√¢n trang v√† c√°c b·ªô l·ªçc'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        races: {
          type: 'array',
          items: { $ref: '#/components/schemas/Race' }
        },
        total: { type: 'number', description: 'T·ªïng s·ªë gi·∫£i ch·∫°y' },
        page: { type: 'number', description: 'Trang hi·ªán t·∫°i' },
        limit: { type: 'number', description: 'S·ªë l∆∞·ª£ng m·ªói trang' },
        totalPages: { type: 'number', description: 'T·ªïng s·ªë trang' }
      }
    }
  })
  async findAll(@Query() queryDto: QueryRaceDto) {
    return this.raceService.findAll(queryDto);
  }

  /**
   * L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ gi·∫£i ch·∫°y
   */
  @Get('stats/overview')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ t·ªïng quan',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ t·∫•t c·∫£ gi·∫£i ch·∫°y trong h·ªá th·ªëng'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        totalRaces: { type: 'number', description: 'T·ªïng s·ªë gi·∫£i ch·∫°y' },
        activeRaces: { type: 'number', description: 'S·ªë gi·∫£i ch·∫°y ƒëang ho·∫°t ƒë·ªông' },
        completedRaces: { type: 'number', description: 'S·ªë gi·∫£i ch·∫°y ƒë√£ ho√†n th√†nh' },
        upcomingRaces: { type: 'number', description: 'S·ªë gi·∫£i ch·∫°y s·∫Øp di·ªÖn ra' },
        totalParticipants: { type: 'number', description: 'T·ªïng s·ªë ng∆∞·ªùi tham gia' },
        totalRevenue: { type: 'number', description: 'T·ªïng doanh thu' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getOverallStats() {
    return this.raceService.getOverallStats();
  }

  /**
   * T√¨m ki·∫øm gi·∫£i ch·∫°y
   */
  @Get('search')
  @Public()
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm gi·∫£i ch·∫°y',
    description: 'T√¨m ki·∫øm gi·∫£i ch·∫°y theo t·ª´ kh√≥a'
  })
  @ApiQuery({ name: 'q', required: true, description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Race]
  })
  @ApiResponse({ status: 400, description: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm' })
  async search(@Query('q') searchTerm: string, @Query('limit') limit: number = 10) {
    if (!searchTerm) {
      throw new Error('T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }
    return this.raceService.search(searchTerm, limit);
  }

  /**
   * L·∫•y gi·∫£i ch·∫°y theo lo·∫°i
   */
  @Get('type/:type')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y gi·∫£i ch·∫°y theo lo·∫°i',
    description: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y theo lo·∫°i c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'type', enum: RaceType, description: 'Lo·∫°i gi·∫£i ch·∫°y' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch gi·∫£i ch·∫°y theo lo·∫°i',
    type: [Race]
  })
  @ApiResponse({ status: 400, description: 'Lo·∫°i gi·∫£i ch·∫°y kh√¥ng h·ª£p l·ªá' })
  async findByType(@Param('type') type: RaceType, @Query('limit') limit: number = 10) {
    return this.raceService.findByType(type, limit);
  }

  /**
   * L·∫•y gi·∫£i ch·∫°y theo c√¢u l·∫°c b·ªô
   */
  @Get('club/:clubId')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y gi·∫£i ch·∫°y theo c√¢u l·∫°c b·ªô',
    description: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y c·ªßa m·ªôt c√¢u l·∫°c b·ªô c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch gi·∫£i ch·∫°y theo c√¢u l·∫°c b·ªô',
    type: [Race]
  })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async findByClub(@Param('clubId') clubId: string, @Query('limit') limit: number = 10) {
    return this.raceService.findByClub(clubId, limit);
  }

  /**
   * L·∫•y gi·∫£i ch·∫°y s·∫Øp di·ªÖn ra
   */
  @Get('upcoming')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y gi·∫£i ch·∫°y s·∫Øp di·ªÖn ra',
    description: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y s·∫Øp di·ªÖn ra'
  })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch gi·∫£i ch·∫°y s·∫Øp di·ªÖn ra',
    type: [Race]
  })
  async getUpcoming(@Query('limit') limit: number = 10) {
    return this.raceService.getUpcoming(limit);
  }

  /**
   * L·∫•y gi·∫£i ch·∫°y theo m√£
   */
  @Get('code/:raceCode')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y gi·∫£i ch·∫°y theo m√£',
    description: 'L·∫•y th√¥ng tin gi·∫£i ch·∫°y theo m√£ duy nh·∫•t'
  })
  @ApiParam({ name: 'raceCode', description: 'M√£ gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin gi·∫£i ch·∫°y',
    type: Race
  })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async findByCode(@Param('raceCode') raceCode: string): Promise<Race> {
    return this.raceService.findByCode(raceCode);
  }

  /**
   * L·∫•y gi·∫£i ch·∫°y theo ID
   */
  @Get(':id')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y gi·∫£i ch·∫°y theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin gi·∫£i ch·∫°y',
    type: Race
  })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async findOne(@Param('id') id: string): Promise<Race> {
    return this.raceService.findOne(id);
  }

  /**
   * C·∫≠p nh·∫≠t gi·∫£i ch·∫°y
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t gi·∫£i ch·∫°y',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string, 
    @Body() updateRaceDto: UpdateRaceDto,
    @Req() req: any
  ): Promise<Race> {
    return this.raceService.update(id, updateRaceDto, req.user.userId);
  }

  /**
   * C√¥ng b·ªë gi·∫£i ch·∫°y
   */
  @Patch(':id/publish')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C√¥ng b·ªë gi·∫£i ch·∫°y',
    description: 'C√¥ng b·ªë gi·∫£i ch·∫°y ƒë·ªÉ m·ªçi ng∆∞·ªùi c√≥ th·ªÉ xem'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'C√¥ng b·ªë gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c√¥ng b·ªë' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async publish(@Param('id') id: string, @Req() req: any): Promise<Race> {
    return this.raceService.publish(id, req.user.userId);
  }

  /**
   * M·ªü ƒëƒÉng k√Ω
   */
  @Patch(':id/open-registration')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'M·ªü ƒëƒÉng k√Ω',
    description: 'M·ªü ƒëƒÉng k√Ω cho gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'M·ªü ƒëƒÉng k√Ω th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn m·ªü ƒëƒÉng k√Ω' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async openRegistration(@Param('id') id: string, @Req() req: any): Promise<Race> {
    return this.raceService.openRegistration(id, req.user.userId);
  }

  /**
   * ƒê√≥ng ƒëƒÉng k√Ω
   */
  @Patch(':id/close-registration')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'ƒê√≥ng ƒëƒÉng k√Ω',
    description: 'ƒê√≥ng ƒëƒÉng k√Ω cho gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'ƒê√≥ng ƒëƒÉng k√Ω th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn ƒë√≥ng ƒëƒÉng k√Ω' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async closeRegistration(@Param('id') id: string, @Req() req: any): Promise<Race> {
    return this.raceService.closeRegistration(id, req.user.userId);
  }

  /**
   * K√≠ch ho·∫°t gi·∫£i ch·∫°y
   */
  @Patch(':id/activate')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'K√≠ch ho·∫°t gi·∫£i ch·∫°y',
    description: 'K√≠ch ho·∫°t gi·∫£i ch·∫°y ƒë·ªÉ b·∫Øt ƒë·∫ßu'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'K√≠ch ho·∫°t gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn k√≠ch ho·∫°t' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async activate(@Param('id') id: string, @Req() req: any): Promise<Race> {
    return this.raceService.activate(id, req.user.userId);
  }

  /**
   * Ho√†n th√†nh gi·∫£i ch·∫°y
   */
  @Patch(':id/complete')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'Ho√†n th√†nh gi·∫£i ch·∫°y',
    description: 'ƒê√°nh d·∫•u gi·∫£i ch·∫°y ƒë√£ ho√†n th√†nh'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Ho√†n th√†nh gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn ho√†n th√†nh' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async complete(@Param('id') id: string, @Req() req: any): Promise<Race> {
    return this.raceService.complete(id, req.user.userId);
  }

  /**
   * H·ªßy gi·∫£i ch·∫°y
   */
  @Patch(':id/cancel')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'H·ªßy gi·∫£i ch·∫°y',
    description: 'H·ªßy gi·∫£i ch·∫°y v·ªõi l√Ω do c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'H·ªßy gi·∫£i ch·∫°y th√†nh c√¥ng',
    type: Race
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn h·ªßy' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async cancel(
    @Param('id') id: string, 
    @Body('reason') reason: string,
    @Req() req: any
  ): Promise<Race> {
    return this.raceService.cancel(id, reason, req.user.userId);
  }

  /**
   * ƒêƒÉng k√Ω tham gia gi·∫£i ch·∫°y
   */
  @Post(':id/register')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'ƒêƒÉng k√Ω tham gia gi·∫£i ch·∫°y',
    description: 'ƒêƒÉng k√Ω tham gia m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 201, 
    description: 'ƒêƒÉng k√Ω tham gia th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' },
        raceId: { type: 'string' },
        raceName: { type: 'string' },
        participantId: { type: 'string' },
        registrationDate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ ƒëƒÉng k√Ω tham gia' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  @ApiResponse({ status: 409, description: 'ƒê√£ ƒëƒÉng k√Ω tham gia gi·∫£i ch·∫°y n√†y' })
  async register(
    @Param('id') id: string, 
    @Body() registerDto: RegisterRaceDto,
    @Req() req: any
  ) {
    return this.raceService.registerParticipant(id, req.user.userId, registerDto);
  }

  /**
   * H·ªßy ƒëƒÉng k√Ω tham gia
   */
  @Delete(':id/unregister')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'H·ªßy ƒëƒÉng k√Ω tham gia',
    description: 'H·ªßy ƒëƒÉng k√Ω tham gia m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'H·ªßy ƒëƒÉng k√Ω th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Kh√¥ng th·ªÉ h·ªßy ƒëƒÉng k√Ω' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async unregister(@Param('id') id: string, @Req() req: any) {
    await this.raceService.unregisterParticipant(id, req.user.userId);
    return { message: 'H·ªßy ƒëƒÉng k√Ω th√†nh c√¥ng' };
  }

  /**
   * L·∫•y th·ªëng k√™ gi·∫£i ch·∫°y
   */
  @Get(':id/stats')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ gi·∫£i ch·∫°y',
    description: 'L·∫•y th·ªëng k√™ chi ti·∫øt c·ªßa m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        id: { type: 'string' },
        name: { type: 'string' },
        status: { type: 'string' },
        totalParticipants: { type: 'number' },
        maxParticipants: { type: 'number' },
        registrationFee: { type: 'number' },
        totalRevenue: { type: 'number' },
        startDate: { type: 'string', format: 'date-time' },
        endDate: { type: 'string', format: 'date-time' },
        createdAt: { type: 'string', format: 'date-time' },
        stats: { type: 'object' }
      }
    }
  })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async getStats(@Param('id') id: string) {
    return this.raceService.getStats(id);
  }

  /**
   * X√≥a gi·∫£i ch·∫°y
   */
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a gi·∫£i ch·∫°y',
    description: 'X√≥a gi·∫£i ch·∫°y (soft delete)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a gi·∫£i ch·∫°y th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async remove(@Param('id') id: string, @Req() req: any) {
    await this.raceService.remove(id, req.user.userId);
    return { message: 'X√≥a gi·∫£i ch·∫°y th√†nh c√¥ng' };
  }

  // ==================== PARTICIPANT ENDPOINTS ====================

  /**
   * L·∫•y danh s√°ch ng∆∞·ªùi tham gia
   */
  @Get(':id/participants')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch ng∆∞·ªùi tham gia',
    description: 'L·∫•y danh s√°ch ng∆∞·ªùi tham gia c·ªßa m·ªôt gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ng∆∞·ªùi tham gia',
    type: [RaceParticipant]
  })
  @ApiResponse({ status: 404, description: 'Gi·∫£i ch·∫°y kh√¥ng t·ªìn t·∫°i' })
  async getParticipants(@Param('id') id: string) {
    return this.participantService.findByRace(id);
  }

  /**
   * L·∫•y th·ªëng k√™ ng∆∞·ªùi tham gia
   */
  @Get(':id/participants/stats')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ ng∆∞·ªùi tham gia',
    description: 'L·∫•y th·ªëng k√™ chi ti·∫øt v·ªÅ ng∆∞·ªùi tham gia'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ ng∆∞·ªùi tham gia',
    schema: {
      type: 'object',
      properties: {
        totalParticipants: { type: 'number' },
        confirmedParticipants: { type: 'number' },
        completedParticipants: { type: 'number' },
        withdrawnParticipants: { type: 'number' },
        totalRevenue: { type: 'number' },
        categoryBreakdown: { type: 'object' },
        paymentStatusBreakdown: { type: 'object' }
      }
    }
  })
  async getParticipantStats(@Param('id') id: string) {
    return this.participantService.getStats(id);
  }

  /**
   * L·∫•y b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi tham gia
   */
  @Get(':id/participants/leaderboard')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y b·∫£ng x·∫øp h·∫°ng',
    description: 'L·∫•y b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi tham gia theo th·ªùi gian ho√†n th√†nh'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiQuery({ name: 'category', required: false, description: 'Danh m·ª•c x·∫øp h·∫°ng' })
  @ApiResponse({ 
    status: 200, 
    description: 'B·∫£ng x·∫øp h·∫°ng',
    type: [RaceParticipant]
  })
  async getParticipantLeaderboard(
    @Param('id') id: string,
    @Query('category') category?: string
  ) {
    return this.participantService.getLeaderboard(id, category);
  }

  /**
   * X√°c nh·∫≠n ng∆∞·ªùi tham gia
   */
  @Patch(':id/participants/:participantId/confirm')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√°c nh·∫≠n ng∆∞·ªùi tham gia',
    description: 'X√°c nh·∫≠n ng∆∞·ªùi tham gia ƒë√£ ƒëƒÉng k√Ω'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'participantId', description: 'ID c·ªßa ng∆∞·ªùi tham gia' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√°c nh·∫≠n th√†nh c√¥ng',
    type: RaceParticipant
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi tham gia' })
  async confirmParticipant(
    @Param('id') id: string,
    @Param('participantId') participantId: string
  ) {
    return this.participantService.confirm(participantId);
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
   */
  @Patch(':id/participants/:participantId/payment')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n',
    description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n c·ªßa ng∆∞·ªùi tham gia'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'participantId', description: 'ID c·ªßa ng∆∞·ªùi tham gia' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: RaceParticipant
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi tham gia' })
  async updatePaymentStatus(
    @Param('id') id: string,
    @Param('participantId') participantId: string,
    @Body('paymentStatus') paymentStatus: PaymentStatus,
    @Body('transactionId') transactionId?: string
  ) {
    return this.participantService.updatePaymentStatus(participantId, paymentStatus, transactionId);
  }

  // ==================== RESULT ENDPOINTS ====================

  /**
   * L·∫•y k·∫øt qu·∫£ c·ªßa ng∆∞·ªùi tham gia
   */
  @Get(':id/participants/:participantId/result')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y k·∫øt qu·∫£ ng∆∞·ªùi tham gia',
    description: 'L·∫•y k·∫øt qu·∫£ c·ªßa m·ªôt ng∆∞·ªùi tham gia c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'participantId', description: 'ID c·ªßa ng∆∞·ªùi tham gia' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ ng∆∞·ªùi tham gia',
    type: RaceResult
  })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£' })
  async getParticipantResult(
    @Param('id') id: string,
    @Param('participantId') participantId: string
  ) {
    return this.resultService.findByParticipant(id, participantId);
  }

  /**
   * T·∫°o k·∫øt qu·∫£ m·ªõi
   */
  @Post(':id/participants/:participantId/result')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o k·∫øt qu·∫£ m·ªõi',
    description: 'T·∫°o k·∫øt qu·∫£ cho ng∆∞·ªùi tham gia'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'participantId', description: 'ID c·ªßa ng∆∞·ªùi tham gia' })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o k·∫øt qu·∫£ th√†nh c√¥ng',
    type: RaceResult
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi tham gia' })
  async createResult(
    @Param('id') id: string,
    @Param('participantId') participantId: string,
    @Body() resultData: any
  ) {
    return this.resultService.create(id, participantId, resultData);
  }

  /**
   * C·∫≠p nh·∫≠t k·∫øt qu·∫£
   */
  @Patch(':id/results/:resultId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t k·∫øt qu·∫£',
    description: 'C·∫≠p nh·∫≠t k·∫øt qu·∫£ c·ªßa ng∆∞·ªùi tham gia'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'resultId', description: 'ID c·ªßa k·∫øt qu·∫£' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: RaceResult
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£' })
  async updateResult(
    @Param('id') id: string,
    @Param('resultId') resultId: string,
    @Body() updateData: any
  ) {
    return this.resultService.update(resultId, updateData);
  }

  /**
   * X√°c nh·∫≠n k·∫øt qu·∫£
   */
  @Patch(':id/results/:resultId/verify')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√°c nh·∫≠n k·∫øt qu·∫£',
    description: 'X√°c nh·∫≠n k·∫øt qu·∫£ c·ªßa ng∆∞·ªùi tham gia'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiParam({ name: 'resultId', description: 'ID c·ªßa k·∫øt qu·∫£' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√°c nh·∫≠n th√†nh c√¥ng',
    type: RaceResult
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£' })
  async verifyResult(
    @Param('id') id: string,
    @Param('resultId') resultId: string,
    @Req() req: any
  ) {
    return this.resultService.verify(resultId, req.user.userId);
  }

  /**
   * L·∫•y b·∫£ng x·∫øp h·∫°ng k·∫øt qu·∫£
   */
  @Get(':id/results/leaderboard')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y b·∫£ng x·∫øp h·∫°ng k·∫øt qu·∫£',
    description: 'L·∫•y b·∫£ng x·∫øp h·∫°ng k·∫øt qu·∫£ c·ªßa gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiQuery({ name: 'category', required: false, description: 'Danh m·ª•c x·∫øp h·∫°ng' })
  @ApiResponse({ 
    status: 200, 
    description: 'B·∫£ng x·∫øp h·∫°ng k·∫øt qu·∫£',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          rank: { type: 'number' },
          participantId: { type: 'string' },
          userId: { type: 'string' },
          bibNumber: { type: 'string' },
          finishTime: { type: 'number' },
          distance: { type: 'number' },
          averagePace: { type: 'number' },
          category: { type: 'string' },
          isCompleted: { type: 'boolean' }
        }
      }
    }
  })
  async getResultLeaderboard(
    @Param('id') id: string,
    @Query('category') category?: string
  ) {
    return this.resultService.getLeaderboard(id, category);
  }

  /**
   * L·∫•y th·ªëng k√™ k·∫øt qu·∫£
   */
  @Get(':id/results/stats')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ k·∫øt qu·∫£',
    description: 'L·∫•y th·ªëng k√™ chi ti·∫øt v·ªÅ k·∫øt qu·∫£ gi·∫£i ch·∫°y'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa gi·∫£i ch·∫°y' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ k·∫øt qu·∫£',
    schema: {
      type: 'object',
      properties: {
        totalResults: { type: 'number' },
        verifiedResults: { type: 'number' },
        pendingResults: { type: 'number' },
        averageFinishTime: { type: 'number' },
        fastestTime: { type: 'number' },
        slowestTime: { type: 'number' },
        completionRate: { type: 'number' }
      }
    }
  })
  async getResultStats(@Param('id') id: string) {
    return this.resultService.getStats(id);
  }
}
