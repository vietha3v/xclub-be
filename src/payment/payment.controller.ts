import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
  ForbiddenException,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { PaymentService } from './payment.service';
import { CreatePaymentDto } from './dto/create-payment.dto';
import { UpdatePaymentDto } from './dto/update-payment.dto';
import { QueryPaymentDto } from './dto/query-payment.dto';
import { ProcessPaymentDto, RefundPaymentDto } from './dto/process-payment.dto';
import { Payment, PaymentType, PaymentStatus, PaymentMethod, PaymentCurrency } from './entities/payment.entity';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';

@ApiTags('üí≥ Qu·∫£n l√Ω thanh to√°n')
@Controller('payments')
@ApiBearerAuth('JWT-auth')
export class PaymentController {
  constructor(private readonly paymentService: PaymentService) {}

  /**
   * T·∫°o thanh to√°n m·ªõi
   */
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o thanh to√°n m·ªõi',
    description: 'T·∫°o thanh to√°n m·ªõi trong h·ªá th·ªëng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o thanh to√°n th√†nh c√¥ng',
    type: Payment
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o thanh to√°n' })
  async create(@Body() createPaymentDto: CreatePaymentDto, @Req() req: any) {
    return this.paymentService.create(createPaymentDto, req.user.userId);
  }

  /**
   * L·∫•y danh s√°ch thanh to√°n
   */
  @Get()
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch thanh to√°n',
    description: 'L·∫•y danh s√°ch thanh to√°n v·ªõi ph√¢n trang v√† t√¨m ki·∫øm'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: { $ref: '#/components/schemas/Payment' }
        },
        total: { type: 'number' },
        page: { type: 'number' },
        limit: { type: 'number' },
        totalPages: { type: 'number' },
        hasNextPage: { type: 'boolean' },
        hasPreviousPage: { type: 'boolean' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Query() queryDto: QueryPaymentDto, @Req() req: any) {
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y thanh to√°n c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      queryDto.payerId = req.user.userId;
    }
    return this.paymentService.findAll(queryDto);
  }

  /**
   * L·∫•y thanh to√°n theo ID
   */
  @Get(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt thanh to√°n'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa thanh to√°n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin thanh to√°n',
    type: Payment
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async findOne(@Param('id') id: string, @Req() req: any) {
    const payment = await this.paymentService.findOne(id);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ ng∆∞·ªùi thanh to√°n, ng∆∞·ªùi nh·∫≠n ho·∫∑c admin)
    if (payment.payerId !== req.user.userId && payment.payeeId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n n√†y');
    }
    
    return payment;
  }

  /**
   * L·∫•y thanh to√°n theo m√£
   */
  @Get('code/:paymentCode')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo m√£',
    description: 'L·∫•y th√¥ng tin thanh to√°n theo m√£ thanh to√°n'
  })
  @ApiParam({ name: 'paymentCode', description: 'M√£ thanh to√°n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin thanh to√°n',
    type: Payment
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async findByCode(@Param('paymentCode') paymentCode: string, @Req() req: any) {
    const payment = await this.paymentService.findByCode(paymentCode);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ ng∆∞·ªùi thanh to√°n, ng∆∞·ªùi nh·∫≠n ho·∫∑c admin)
    if (payment.payerId !== req.user.userId && payment.payeeId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n n√†y');
    }
    
    return payment;
  }

  /**
   * C·∫≠p nh·∫≠t thanh to√°n
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t thanh to√°n',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n (ch·ªâ ng∆∞·ªùi thanh to√°n ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa thanh to√°n' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Payment
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async update(
    @Param('id') id: string, 
    @Body() updatePaymentDto: UpdatePaymentDto,
    @Req() req: any
  ) {
    return this.paymentService.update(id, updatePaymentDto, req.user.userId);
  }

  /**
   * X√≥a thanh to√°n
   */
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a thanh to√°n',
    description: 'X√≥a thanh to√°n (ch·ªâ ng∆∞·ªùi thanh to√°n ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa thanh to√°n' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async remove(@Param('id') id: string, @Req() req: any) {
    await this.paymentService.remove(id, req.user.userId);
    return { message: 'X√≥a thanh to√°n th√†nh c√¥ng' };
  }

  /**
   * X·ª≠ l√Ω thanh to√°n
   */
  @Post('process')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'X·ª≠ l√Ω thanh to√°n',
    description: 'X·ª≠ l√Ω thanh to√°n v·ªõi ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c ch·ªçn'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        transactionId: { type: 'string' },
        paymentUrl: { type: 'string' },
        message: { type: 'string' },
        error: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn thanh to√°n' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async processPayment(@Body() processDto: ProcessPaymentDto, @Req() req: any) {
    return this.paymentService.processPayment(processDto, req.user.userId);
  }

  /**
   * Ho√†n ti·ªÅn
   */
  @Post('refund')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Ho√†n ti·ªÅn',
    description: 'Ho√†n ti·ªÅn cho giao d·ªãch (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Ho√†n ti·ªÅn th√†nh c√¥ng',
    type: Payment
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn ho√†n ti·ªÅn' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y thanh to√°n' })
  async refundPayment(@Body() refundDto: RefundPaymentDto, @Req() req: any) {
    return this.paymentService.refundPayment(refundDto, req.user.userId);
  }

  /**
   * L·∫•y th·ªëng k√™ thanh to√°n
   */
  @Get('stats/overview')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ t·ªïng quan',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ thanh to√°n (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ t·ªïng quan',
    schema: {
      type: 'object',
      properties: {
        totalPayments: { type: 'number' },
        completedPayments: { type: 'number' },
        pendingPayments: { type: 'number' },
        failedPayments: { type: 'number' },
        refundedPayments: { type: 'number' },
        totalAmount: { type: 'number' },
        totalRevenue: { type: 'number' },
        totalRefunds: { type: 'number' },
        typeBreakdown: { type: 'object' },
        methodBreakdown: { type: 'object' },
        statusBreakdown: { type: 'object' },
        currencyBreakdown: { type: 'object' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' })
  async getStats() {
    return this.paymentService.getStats();
  }

  /**
   * L·∫•y thanh to√°n theo ng∆∞·ªùi thanh to√°n
   */
  @Get('payer/:payerId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo ng∆∞·ªùi thanh to√°n',
    description: 'L·∫•y danh s√°ch thanh to√°n c·ªßa m·ªôt ng∆∞·ªùi thanh to√°n'
  })
  @ApiParam({ name: 'payerId', description: 'ID c·ªßa ng∆∞·ªùi thanh to√°n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n theo ng∆∞·ªùi thanh to√°n',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n c·ªßa ng∆∞·ªùi kh√°c' })
  async findByPayer(@Param('payerId') payerId: string, @Req() req: any) {
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem thanh to√°n c·ªßa m√¨nh ho·∫∑c admin)
    if (payerId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n c·ªßa ng∆∞·ªùi kh√°c');
    }
    
    return this.paymentService.findByPayer(payerId);
  }

  /**
   * L·∫•y thanh to√°n theo ng∆∞·ªùi nh·∫≠n
   */
  @Get('payee/:payeeId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo ng∆∞·ªùi nh·∫≠n',
    description: 'L·∫•y danh s√°ch thanh to√°n c·ªßa m·ªôt ng∆∞·ªùi nh·∫≠n'
  })
  @ApiParam({ name: 'payeeId', description: 'ID c·ªßa ng∆∞·ªùi nh·∫≠n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n theo ng∆∞·ªùi nh·∫≠n',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n c·ªßa ng∆∞·ªùi kh√°c' })
  async findByPayee(@Param('payeeId') payeeId: string, @Req() req: any) {
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem thanh to√°n c·ªßa m√¨nh ho·∫∑c admin)
    if (payeeId !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n c·ªßa ng∆∞·ªùi kh√°c');
    }
    
    return this.paymentService.findByPayee(payeeId);
  }

  /**
   * L·∫•y thanh to√°n theo CLB
   */
  @Get('club/:clubId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo CLB',
    description: 'L·∫•y danh s√°ch thanh to√°n c·ªßa m·ªôt CLB'
  })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa CLB' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n theo CLB',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByClub(@Param('clubId') clubId: string) {
    return this.paymentService.findByClub(clubId);
  }

  /**
   * L·∫•y thanh to√°n theo ƒë·ªëi t∆∞·ª£ng li√™n quan
   */
  @Get('related/:relatedObjectType/:relatedObjectId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo ƒë·ªëi t∆∞·ª£ng li√™n quan',
    description: 'L·∫•y danh s√°ch thanh to√°n c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng li√™n quan'
  })
  @ApiParam({ name: 'relatedObjectType', description: 'Lo·∫°i ƒë·ªëi t∆∞·ª£ng li√™n quan' })
  @ApiParam({ name: 'relatedObjectId', description: 'ID c·ªßa ƒë·ªëi t∆∞·ª£ng li√™n quan' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n theo ƒë·ªëi t∆∞·ª£ng li√™n quan',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByRelatedObject(
    @Param('relatedObjectType') relatedObjectType: string,
    @Param('relatedObjectId') relatedObjectId: string
  ) {
    return this.paymentService.findByRelatedObject(relatedObjectId, relatedObjectType);
  }

  /**
   * T√¨m ki·∫øm thanh to√°n
   */
  @Get('search')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm thanh to√°n',
    description: 'T√¨m ki·∫øm thanh to√°n theo t·ª´ kh√≥a'
  })
  @ApiQuery({ name: 'q', description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async search(
    @Query('q') query: string,
    @Req() req: any,
    @Query('limit') limit?: number
  ) {
    const payments = await this.paymentService.search(query, limit);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y thanh to√°n c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return payments.filter(p => p.payerId === req.user.userId || p.payeeId === req.user.userId);
    }
    
    return payments;
  }

  /**
   * L·∫•y thanh to√°n theo tags
   */
  @Get('tags')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n theo tags',
    description: 'L·∫•y danh s√°ch thanh to√°n theo tags'
  })
  @ApiQuery({ name: 'tags', description: 'Danh s√°ch tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n theo tags',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByTags(@Query('tags') tags: string, @Req() req: any) {
    const tagArray = tags.split(',').map(tag => tag.trim());
    const payments = await this.paymentService.findByTags(tagArray);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y thanh to√°n c·ªßa user hi·ªán t·∫°i
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return payments.filter(p => p.payerId === req.user.userId || p.payeeId === req.user.userId);
    }
    
    return payments;
  }

  /**
   * L·∫•y thanh to√°n h·∫øt h·∫°n
   */
  @Get('expired')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y thanh to√°n h·∫øt h·∫°n',
    description: 'L·∫•y danh s√°ch thanh to√°n ƒë√£ h·∫øt h·∫°n (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n h·∫øt h·∫°n',
    type: [Payment]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem thanh to√°n h·∫øt h·∫°n' })
  async getExpiredPayments() {
    return this.paymentService.getExpiredPayments();
  }

  /**
   * H·ªßy thanh to√°n h·∫øt h·∫°n
   */
  @Post('cancel-expired')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'H·ªßy thanh to√°n h·∫øt h·∫°n',
    description: 'H·ªßy t·∫•t c·∫£ thanh to√°n ƒë√£ h·∫øt h·∫°n (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'H·ªßy thanh to√°n h·∫øt h·∫°n th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        count: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn h·ªßy thanh to√°n h·∫øt h·∫°n' })
  async cancelExpiredPayments() {
    return this.paymentService.cancelExpiredPayments();
  }
}
