import { 
  Controller, 
  Get, 
  Post, 
  Put,
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query, 
  UseGuards,
  Req,
  ParseIntPipe,
  DefaultValuePipe
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBearerAuth, 
  ApiQuery,
  ApiParam 
} from '@nestjs/swagger';
import { UserService, UserProfileResponse } from './user.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { NotificationSettingsDto } from './dto/notification-settings.dto';
import { SecuritySettingsDto } from './dto/security-settings.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { Public } from '../auth/decorators/public.decorator';
import { User, UserStatus, UserExperience } from './entities/user.entity';

@ApiTags('üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng')
@Controller('users')
@UseGuards(JwtAuthGuard, RolesGuard)
export class UserController {
  constructor(private readonly userService: UserService) {}



  /**
   * T·∫°o user m·ªõi (ch·ªâ admin)
   */
  @Post()
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'T·∫°o user m·ªõi (Admin)',
    description: 'T·∫°o user m·ªõi trong h·ªá th·ªëng (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o user th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o user' })
  @ApiResponse({ status: 409, description: 'Email ƒë√£ t·ªìn t·∫°i' })
  async create(
    @Body() createUserDto: CreateUserDto,
    @Req() req: any
  ): Promise<User> {
    return this.userService.create(createUserDto, req.user?.userId);
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ user (c√≥ ph√¢n trang v√† filter)
   */
  @Get()
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch user',
    description: 'L·∫•y danh s√°ch t·∫•t c·∫£ user v·ªõi ph√¢n trang v√† filter (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiQuery({ name: 'page', required: false, description: 'Trang hi·ªán t·∫°i', type: Number })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng item m·ªói trang', type: Number })
  @ApiQuery({ name: 'search', required: false, description: 'T·ª´ kh√≥a t√¨m ki·∫øm', type: String })
  @ApiQuery({ name: 'status', required: false, description: 'L·ªçc theo tr·∫°ng th√°i', enum: UserStatus })
  @ApiQuery({ name: 'experience', required: false, description: 'L·ªçc theo kinh nghi·ªám', enum: UserExperience })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y danh s√°ch user th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: { $ref: '#/components/schemas/UserProfileResponse' }
        },
        total: { type: 'number', description: 'T·ªïng s·ªë user' },
        page: { type: 'number', description: 'Trang hi·ªán t·∫°i' },
        limit: { type: 'number', description: 'S·ªë l∆∞·ª£ng item m·ªói trang' }
      }
    }
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem danh s√°ch user' })
  async findAll(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,
    @Req() req: any,
    @Query('search') search?: string,
    @Query('status') status?: UserStatus,
    @Query('experience') experience?: UserExperience
  ): Promise<{ data: UserProfileResponse[]; total: number; page: number; limit: number }> {
    return this.userService.findAll(page, limit, search, status, experience, req.user?.userId);
  }

  /**
   * L·∫•y th√¥ng tin user hi·ªán t·∫°i
   */
  @Get('me')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng tin user hi·ªán t·∫°i',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y th√¥ng tin user th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async getCurrentUser(@Req() req: any): Promise<User> {
    return this.userService.findOne(req.user.userId);
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin user hi·ªán t·∫°i
   */
  @Put('me')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t th√¥ng tin user hi·ªán t·∫°i',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async updateCurrentUser(
    @Body() updateUserDto: UpdateUserDto,
    @Req() req: any
  ): Promise<User> {
    return this.userService.update(req.user.userId, updateUserDto, req.user.userId);
  }

  /**
   * L·∫•y th√¥ng tin user theo ID
   */
  @Get(':id')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng tin user',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa user theo ID'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y th√¥ng tin user th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem user n√†y' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async findOne(
    @Param('id') id: string,
    @Req() req: any
  ): Promise<User> {
    return this.userService.findOne(id, req.user?.userId);
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin user
   */
  @Patch(':id')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t th√¥ng tin user',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa user (ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t user n√†y' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto,
    @Req() req: any
  ): Promise<User> {
    return this.userService.update(id, updateUserDto, req.user?.userId);
  }

  /**
   * X√≥a user (soft delete)
   */
  @Delete(':id')
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'X√≥a user',
    description: 'X√≥a user kh·ªèi h·ªá th·ªëng (soft delete - ch·ªâ d√†nh cho System Admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ status: 200, description: 'X√≥a user th√†nh c√¥ng' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a user' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async remove(
    @Param('id') id: string,
    @Req() req: any
  ): Promise<void> {
    return this.userService.remove(id, req.user?.userId);
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i user
   */
  @Patch(':id/status')
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i user',
    description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa user (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async updateStatus(
    @Param('id') id: string,
    @Body('status') status: UserStatus,
    @Req() req: any
  ): Promise<User> {
    return this.userService.updateStatus(id, status, req.user?.userId);
  }

  /**
   * Th√™m vai tr√≤ cho user
   */
  @Post(':id/roles')
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'Th√™m vai tr√≤ cho user',
    description: 'Th√™m vai tr√≤ m·ªõi cho user (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√™m vai tr√≤ th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn th√™m vai tr√≤' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async addRole(
    @Param('id') id: string,
    @Body('role') role: string,
    @Req() req: any
  ): Promise<User> {
    return this.userService.addRole(id, role, req.user?.userId);
  }

  /**
   * X√≥a vai tr√≤ c·ªßa user
   */
  @Delete(':id/roles/:role')
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'X√≥a vai tr√≤ c·ªßa user',
    description: 'X√≥a vai tr√≤ c·ª• th·ªÉ c·ªßa user (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiParam({ name: 'role', description: 'Vai tr√≤ c·∫ßn x√≥a', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a vai tr√≤ th√†nh c√¥ng',
    type: User
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a vai tr√≤' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i' })
  async removeRole(
    @Param('id') id: string,
    @Param('role') role: string,
    @Req() req: any
  ): Promise<User> {
    return this.userService.removeRole(id, role, req.user?.userId);
  }

  /**
   * L·∫•y th·ªëng k√™ user
   */
  @Get('stats/overview')
  @Roles('system_admin')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ user',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ user trong h·ªá th·ªëng (ch·ªâ d√†nh cho System Admin)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        total: { type: 'number', description: 'T·ªïng s·ªë user' },
        active: { type: 'number', description: 'S·ªë user ƒëang ho·∫°t ƒë·ªông' },
        verified: { type: 'number', description: 'S·ªë user ƒë√£ x√°c th·ª±c' },
        inactive: { type: 'number', description: 'S·ªë user kh√¥ng ho·∫°t ƒë·ªông' }
      }
    }
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' })
  async getStats(@Req() req: any): Promise<any> {
    return this.userService.getStats(req.user?.userId);
  }

  /**
   * L·∫•y profile c√¥ng khai c·ªßa user
   */
  @Get(':id/profile')
  @Public()
  @ApiOperation({ 
    summary: 'L·∫•y profile c√¥ng khai',
    description: 'L·∫•y th√¥ng tin profile c√¥ng khai c·ªßa user (kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa user', type: String })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y profile th√†nh c√¥ng',
    type: UserProfileResponse
  })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√¥ng khai' })
  async getPublicProfile(@Param('id') id: string): Promise<UserProfileResponse> {
    const user = await this.userService.findOne(id);
    
    // Ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c√¥ng khai
    return {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      avatar: user.avatar,
      experience: user.experience,
      location: user.location,
      isPublic: user.isPublic,
      roles: user.roles,
      createdAt: user.createdAt,
    };
  }



  /**
   * L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
   */
  @Get('me/notifications')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o',
    description: 'L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y c√†i ƒë·∫∑t th√¥ng b√°o th√†nh c√¥ng'
  })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async getNotificationSettings(@Req() req: any): Promise<any> {
    return this.userService.getNotificationSettings(req.user.userId);
  }

  /**
   * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o c·ªßa user hi·ªán t·∫°i
   */
  @Put('me/notifications')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o',
    description: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th√†nh c√¥ng'
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async updateNotificationSettings(
    @Body() settings: NotificationSettingsDto,
    @Req() req: any
  ): Promise<any> {
    return this.userService.updateNotificationSettings(req.user.userId, settings);
  }

  /**
   * L·∫•y c√†i ƒë·∫∑t b·∫£o m·∫≠t c·ªßa user hi·ªán t·∫°i
   */
  @Get('me/security')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'L·∫•y c√†i ƒë·∫∑t b·∫£o m·∫≠t',
    description: 'L·∫•y c√†i ƒë·∫∑t b·∫£o m·∫≠t c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'L·∫•y c√†i ƒë·∫∑t b·∫£o m·∫≠t th√†nh c√¥ng'
  })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async getSecuritySettings(@Req() req: any): Promise<any> {
    return this.userService.getSecuritySettings(req.user.userId);
  }

  /**
   * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t c·ªßa user hi·ªán t·∫°i
   */
  @Put('me/security')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t',
    description: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t c·ªßa user hi·ªán t·∫°i'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t th√†nh c√¥ng'
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Ch∆∞a ƒëƒÉng nh·∫≠p' })
  async updateSecuritySettings(
    @Body() settings: SecuritySettingsDto,
    @Req() req: any
  ): Promise<any> {
    return this.userService.updateSecuritySettings(req.user.userId, settings);
  }

}
