import { 
  Controller, 
  Get, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query, 
  UseGuards, 
  Req,
  HttpCode,
  HttpStatus
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { ActivityService } from './activity.service';
import { UpdateActivityDto } from './dto/update-activity.dto';
import { QueryActivityDto } from './dto/query-activity.dto';
import { Activity, ActivityType } from './entities/activity.entity';

@ApiTags('üèÉ‚Äç‚ôÇÔ∏è Ghi nh·∫≠n ho·∫°t ƒë·ªông')
@Controller('activities')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT-auth')
export class ActivityController {
  constructor(private readonly activityService: ActivityService) {}

  // POST method removed - Activities should only be created through integration sync
  // Use /integrations/sync endpoint instead

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch ho·∫°t ƒë·ªông v·ªõi ph√¢n trang v√† filter' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ho·∫°t ƒë·ªông',
    schema: {
      type: 'object',
      properties: {
        activities: { type: 'array', items: { $ref: '#/components/schemas/Activity' } },
        total: { type: 'number', description: 'T·ªïng s·ªë ho·∫°t ƒë·ªông' },
        page: { type: 'number', description: 'Trang hi·ªán t·∫°i' },
        limit: { type: 'number', description: 'S·ªë l∆∞·ª£ng m·ªói trang' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Req() req, @Query() queryDto: QueryActivityDto) {
    return this.activityService.findAll(req.user.userId, queryDto);
  }

  @Get('stats')
  @ApiOperation({ summary: 'L·∫•y th·ªëng k√™ ho·∫°t ƒë·ªông c·ªßa user' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ ho·∫°t ƒë·ªông',
    schema: {
      type: 'object',
      properties: {
        totalActivities: { type: 'number', description: 'T·ªïng s·ªë ho·∫°t ƒë·ªông' },
        totalDistance: { type: 'number', description: 'T·ªïng kho·∫£ng c√°ch (m√©t)' },
        totalDuration: { type: 'number', description: 'T·ªïng th·ªùi gian (gi√¢y)' },
        totalCalories: { type: 'number', description: 'T·ªïng calories' },
        averageSpeed: { type: 'number', description: 'T·ªëc ƒë·ªô trung b√¨nh (km/h)' },
        averagePace: { type: 'number', description: 'Pace trung b√¨nh (s/km)' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getUserStats(@Req() req) {
    return this.activityService.getUserStats(req.user.userId);
  }

  @Get('recent')
  @ApiOperation({ summary: 'L·∫•y ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông (m·∫∑c ƒë·ªãnh: 5)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y',
    type: [Activity]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getRecentActivities(@Req() req, @Query('limit') limit: number = 5) {
    return this.activityService.getRecentActivities(req.user.userId, limit);
  }

  @Get('type/:type')
  @ApiOperation({ summary: 'L·∫•y ho·∫°t ƒë·ªông theo lo·∫°i' })
  @ApiParam({ name: 'type', enum: ActivityType, description: 'Lo·∫°i ho·∫°t ƒë·ªông' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ho·∫°t ƒë·ªông theo lo·∫°i',
    type: [Activity]
  })
  @ApiResponse({ status: 400, description: 'Lo·∫°i ho·∫°t ƒë·ªông kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getActivitiesByType(
    @Req() req, 
    @Param('type') type: ActivityType, 
    @Query('limit') limit: number = 10
  ) {
    return this.activityService.getActivitiesByType(req.user.userId, type, limit);
  }

  @Get(':id')
  @ApiOperation({ summary: 'L·∫•y ho·∫°t ƒë·ªông theo ID' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa ho·∫°t ƒë·ªông' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin ho·∫°t ƒë·ªông',
    type: Activity
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ho·∫°t ƒë·ªông n√†y' })
  @ApiResponse({ status: 404, description: 'Ho·∫°t ƒë·ªông kh√¥ng t·ªìn t·∫°i' })
  async findOne(@Req() req, @Param('id') id: string): Promise<Activity> {
    return this.activityService.findOne(req.user.userId, id);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa ho·∫°t ƒë·ªông' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Activity
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ho·∫°t ƒë·ªông n√†y' })
  @ApiResponse({ status: 404, description: 'Ho·∫°t ƒë·ªông kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Req() req, 
    @Param('id') id: string, 
    @Body() updateActivityDto: UpdateActivityDto
  ): Promise<Activity> {
    return this.activityService.update(req.user.userId, id, updateActivityDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'X√≥a ho·∫°t ƒë·ªông (x√≥a m·ªÅm)' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa ho·∫°t ƒë·ªông' })
  @ApiResponse({ status: 200, description: 'X√≥a th√†nh c√¥ng' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a ho·∫°t ƒë·ªông n√†y' })
  @ApiResponse({ status: 404, description: 'Ho·∫°t ƒë·ªông kh√¥ng t·ªìn t·∫°i' })
  async remove(@Req() req, @Param('id') id: string): Promise<void> {
    return this.activityService.remove(req.user.userId, id);
  }
}
