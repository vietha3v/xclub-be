import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Req,
  HttpCode,
  HttpStatus,
  UseInterceptors,
  UploadedFile,
  ForbiddenException,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery, ApiConsumes } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { MediaService } from './media.service';
import { CreateMediaDto } from './dto/create-media.dto';
import { UpdateMediaDto } from './dto/update-media.dto';
import { QueryMediaDto } from './dto/query-media.dto';
import { UploadMediaDto } from './dto/upload-media.dto';
import { Media, MediaType, MediaStatus } from './entities/media.entity';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';

@ApiTags('üìÅ Qu·∫£n l√Ω media')
@Controller('media')
@ApiBearerAuth('JWT-auth')
export class MediaController {
  constructor(private readonly mediaService: MediaService) {}

  /**
   * T·∫°o media m·ªõi
   */
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'T·∫°o media m·ªõi',
    description: 'T·∫°o media m·ªõi trong h·ªá th·ªëng (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o media th√†nh c√¥ng',
    type: Media
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o media' })
  async create(@Body() createMediaDto: CreateMediaDto, @Req() req: any) {
    return this.mediaService.create(createMediaDto, req.user.userId);
  }

  /**
   * L·∫•y danh s√°ch media
   */
  @Get()
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch media',
    description: 'L·∫•y danh s√°ch media v·ªõi ph√¢n trang v√† t√¨m ki·∫øm'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: { $ref: '#/components/schemas/Media' }
        },
        total: { type: 'number' },
        page: { type: 'number' },
        limit: { type: 'number' },
        totalPages: { type: 'number' },
        hasNextPage: { type: 'boolean' },
        hasPreviousPage: { type: 'boolean' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Query() queryDto: QueryMediaDto, @Req() req: any) {
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y media c·ªßa user hi·ªán t·∫°i ho·∫∑c public
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      queryDto.uploadedBy = req.user.userId;
    }
    return this.mediaService.findAll(queryDto);
  }

  /**
   * L·∫•y media theo ID
   */
  @Get(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt media'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa media' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin media',
    type: Media
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y media' })
  async findOne(@Param('id') id: string, @Req() req: any) {
    const media = await this.mediaService.findOne(id);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem media c·ªßa m√¨nh, public, ho·∫∑c admin)
    if (media.uploadedBy !== req.user.userId && media.visibility !== 'public' && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem media n√†y');
    }
    
    return media;
  }

  /**
   * L·∫•y media theo URL
   */
  @Get('url/:url')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo URL',
    description: 'L·∫•y th√¥ng tin media theo URL'
  })
  @ApiParam({ name: 'url', description: 'URL c·ªßa media' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin media',
    type: Media
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y media' })
  async findByUrl(@Param('url') url: string, @Req() req: any) {
    const media = await this.mediaService.findByUrl(url);
    
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem media c·ªßa m√¨nh, public, ho·∫∑c admin)
    if (media.uploadedBy !== req.user.userId && media.visibility !== 'public' && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem media n√†y');
    }
    
    return media;
  }

  /**
   * C·∫≠p nh·∫≠t media
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t media',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin media (ch·ªâ ng∆∞·ªùi upload ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa media' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Media
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y media' })
  async update(
    @Param('id') id: string, 
    @Body() updateMediaDto: UpdateMediaDto,
    @Req() req: any
  ) {
    return this.mediaService.update(id, updateMediaDto, req.user.userId);
  }

  /**
   * X√≥a media
   */
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'X√≥a media',
    description: 'X√≥a media (ch·ªâ ng∆∞·ªùi upload ho·∫∑c admin)'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa media' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a th√†nh c√¥ng',
    schema: { type: 'object', properties: { message: { type: 'string' } } }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Kh√¥ng t√¨m th·∫•y media' })
  async remove(@Param('id') id: string, @Req() req: any) {
    await this.mediaService.remove(id, req.user.userId);
    return { message: 'X√≥a media th√†nh c√¥ng' };
  }

  /**
   * Upload file
   */
  @Post('upload')
  @UseGuards(JwtAuthGuard)
  @UseInterceptors(FileInterceptor('file'))
  @HttpCode(HttpStatus.CREATED)
  @ApiConsumes('multipart/form-data')
  @ApiOperation({ 
    summary: 'Upload file',
    description: 'Upload file l√™n h·ªá th·ªëng'
  })
  @ApiResponse({ 
    status: 201, 
    description: 'Upload file th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        mediaId: { type: 'string' },
        url: { type: 'string' },
        message: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'File kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async uploadFile(
    @UploadedFile() file: any,
    @Body() uploadDto: UploadMediaDto,
    @Req() req: any
  ) {
    return this.mediaService.uploadFile(file, uploadDto, req.user.userId);
  }

  /**
   * L·∫•y th·ªëng k√™ media
   */
  @Get('stats/overview')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y th·ªëng k√™ t·ªïng quan',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ media (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ t·ªïng quan',
    schema: {
      type: 'object',
      properties: {
        totalMedia: { type: 'number' },
        totalSize: { type: 'number' },
        typeBreakdown: { type: 'object' },
        statusBreakdown: { type: 'object' },
        mimeTypeBreakdown: { type: 'object' },
        sizeBreakdown: { type: 'object' },
        uploadsThisMonth: { type: 'number' },
        sizeThisMonth: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' })
  async getStats() {
    return this.mediaService.getStats();
  }

  /**
   * L·∫•y media theo lo·∫°i
   */
  @Get('type/:type')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo lo·∫°i',
    description: 'L·∫•y danh s√°ch media theo lo·∫°i c·ª• th·ªÉ'
  })
  @ApiParam({ name: 'type', description: 'Lo·∫°i media', enum: MediaType })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media theo lo·∫°i',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByType(@Param('type') type: MediaType, @Req() req: any) {
    const media = await this.mediaService.findByType(type);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y media c·ªßa user hi·ªán t·∫°i ho·∫∑c public
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return media.filter(m => m.uploadedBy === req.user.userId || m.visibility === 'public');
    }
    
    return media;
  }

  /**
   * L·∫•y media theo ng∆∞·ªùi upload
   */
  @Get('uploader/:uploadedBy')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo ng∆∞·ªùi upload',
    description: 'L·∫•y danh s√°ch media c·ªßa m·ªôt ng∆∞·ªùi upload'
  })
  @ApiParam({ name: 'uploadedBy', description: 'ID c·ªßa ng∆∞·ªùi upload' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media theo ng∆∞·ªùi upload',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem media c·ªßa ng∆∞·ªùi kh√°c' })
  async findByUploader(@Param('uploadedBy') uploadedBy: string, @Req() req: any) {
    // Ki·ªÉm tra quy·ªÅn xem (ch·ªâ xem media c·ªßa m√¨nh ho·∫∑c admin)
    if (uploadedBy !== req.user.userId && !req.user.roles || !req.user.roles.includes('admin')) {
      throw new ForbiddenException('Kh√¥ng c√≥ quy·ªÅn xem media c·ªßa ng∆∞·ªùi kh√°c');
    }
    
    return this.mediaService.findByUploader(uploadedBy);
  }

  /**
   * L·∫•y media theo CLB
   */
  @Get('club/:clubId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo CLB',
    description: 'L·∫•y danh s√°ch media c·ªßa m·ªôt CLB'
  })
  @ApiParam({ name: 'clubId', description: 'ID c·ªßa CLB' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media theo CLB',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByClub(@Param('clubId') clubId: string) {
    return this.mediaService.findByClub(clubId);
  }

  /**
   * L·∫•y media theo ƒë·ªëi t∆∞·ª£ng li√™n quan
   */
  @Get('related/:relatedObjectType/:relatedObjectId')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo ƒë·ªëi t∆∞·ª£ng li√™n quan',
    description: 'L·∫•y danh s√°ch media c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng li√™n quan'
  })
  @ApiParam({ name: 'relatedObjectType', description: 'Lo·∫°i ƒë·ªëi t∆∞·ª£ng li√™n quan' })
  @ApiParam({ name: 'relatedObjectId', description: 'ID c·ªßa ƒë·ªëi t∆∞·ª£ng li√™n quan' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media theo ƒë·ªëi t∆∞·ª£ng li√™n quan',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByRelatedObject(
    @Param('relatedObjectType') relatedObjectType: string,
    @Param('relatedObjectId') relatedObjectId: string
  ) {
    return this.mediaService.findByRelatedObject(relatedObjectId, relatedObjectType);
  }

  /**
   * T√¨m ki·∫øm media
   */
  @Get('search')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'T√¨m ki·∫øm media',
    description: 'T√¨m ki·∫øm media theo t·ª´ kh√≥a'
  })
  @ApiQuery({ name: 'q', description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async search(
    @Query('q') query: string,
    @Req() req: any,
    @Query('limit') limit?: number
  ) {
    const media = await this.mediaService.search(query, limit);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y media c·ªßa user hi·ªán t·∫°i ho·∫∑c public
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return media.filter(m => m.uploadedBy === req.user.userId || m.visibility === 'public');
    }
    
    return media;
  }

  /**
   * L·∫•y media theo tags
   */
  @Get('tags')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ 
    summary: 'L·∫•y media theo tags',
    description: 'L·∫•y danh s√°ch media theo tags'
  })
  @ApiQuery({ name: 'tags', description: 'Danh s√°ch tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media theo tags',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findByTags(@Query('tags') tags: string, @Req() req: any) {
    const tagArray = tags.split(',').map(tag => tag.trim());
    const media = await this.mediaService.findByTags(tagArray);
    
    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ l·∫•y media c·ªßa user hi·ªán t·∫°i ho·∫∑c public
    if (!req.user.roles || !req.user.roles.includes('admin')) {
      return media.filter(m => m.uploadedBy === req.user.userId || m.visibility === 'public');
    }
    
    return media;
  }

  /**
   * L·∫•y media h·∫øt h·∫°n
   */
  @Get('expired')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @ApiOperation({ 
    summary: 'L·∫•y media h·∫øt h·∫°n',
    description: 'L·∫•y danh s√°ch media ƒë√£ h·∫øt h·∫°n (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch media h·∫øt h·∫°n',
    type: [Media]
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn xem media h·∫øt h·∫°n' })
  async getExpiredMedia() {
    return this.mediaService.getExpiredMedia();
  }

  /**
   * X√≥a media h·∫øt h·∫°n
   */
  @Post('delete-expired')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('admin', 'moderator')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'X√≥a media h·∫øt h·∫°n',
    description: 'X√≥a t·∫•t c·∫£ media ƒë√£ h·∫øt h·∫°n (ch·ªâ admin/moderator)'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a media h·∫øt h·∫°n th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        count: { type: 'number' }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a media h·∫øt h·∫°n' })
  async deleteExpiredMedia() {
    return this.mediaService.deleteExpiredMedia();
  }
}
