import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query, 
  UseGuards, 
  Req,
  HttpCode,
  HttpStatus
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { ClubService } from './club.service';
import { CreateClubDto } from './dto/create-club.dto';
import { UpdateClubDto } from './dto/update-club.dto';
import { QueryClubDto } from './dto/query-club.dto';
import { Club, ClubStatus } from './entities/club.entity';

@ApiTags('üè¢ Qu·∫£n l√Ω c√¢u l·∫°c b·ªô')
@Controller('clubs')
@ApiBearerAuth('JWT-auth')
export class ClubController {
  constructor(private readonly clubService: ClubService) {}

  @Post()
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ summary: 'T·∫°o c√¢u l·∫°c b·ªô m·ªõi' })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o c√¢u l·∫°c b·ªô th√†nh c√¥ng',
    type: Club
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async create(@Body() createClubDto: CreateClubDto, @Req() req: any): Promise<Club> {
    return this.clubService.create(createClubDto, req.user.userId);
  }

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch c√¢u l·∫°c b·ªô v·ªõi ph√¢n trang v√† filter' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch c√¢u l·∫°c b·ªô',
    schema: {
      type: 'object',
      properties: {
        clubs: { type: 'array', items: { $ref: '#/components/schemas/Club' } },
        total: { type: 'number', description: 'T·ªïng s·ªë c√¢u l·∫°c b·ªô' },
        page: { type: 'number', description: 'Trang hi·ªán t·∫°i' },
        limit: { type: 'number', description: 'S·ªë l∆∞·ª£ng m·ªói trang' }
      }
    }
  })
  async findAll(@Query() queryDto: QueryClubDto) {
    return this.clubService.findAll(queryDto);
  }

  @Get('stats')
  @ApiOperation({ summary: 'L·∫•y th·ªëng k√™ c√¢u l·∫°c b·ªô' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th·ªëng k√™ c√¢u l·∫°c b·ªô',
    schema: {
      type: 'object',
      properties: {
        totalClubs: { type: 'number', description: 'T·ªïng s·ªë c√¢u l·∫°c b·ªô' },
        activeClubs: { type: 'number', description: 'S·ªë c√¢u l·∫°c b·ªô ho·∫°t ƒë·ªông' },
        pendingClubs: { type: 'number', description: 'S·ªë c√¢u l·∫°c b·ªô ch·ªù duy·ªát' },
        runningClubs: { type: 'number', description: 'S·ªë c√¢u l·∫°c b·ªô ch·∫°y b·ªô' }
      }
    }
  })
  async getStats() {
    return this.clubService.getStats();
  }

  @Get('search')
  @ApiOperation({ summary: 'T√¨m ki·∫øm c√¢u l·∫°c b·ªô' })
  @ApiQuery({ name: 'q', required: true, description: 'T·ª´ kh√≥a t√¨m ki·∫øm' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
    type: [Club]
  })
  @ApiResponse({ status: 400, description: 'Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm' })
  async search(@Query('q') searchTerm: string, @Query('limit') limit: number = 10) {
    if (!searchTerm) {
      throw new Error('T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }
    return this.clubService.search(searchTerm, limit);
  }

  @Get('city/:city')
  @ApiOperation({ summary: 'L·∫•y c√¢u l·∫°c b·ªô theo th√†nh ph·ªë' })
  @ApiParam({ name: 'city', description: 'T√™n th√†nh ph·ªë' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch c√¢u l·∫°c b·ªô theo th√†nh ph·ªë',
    type: [Club]
  })
  async findByCity(@Param('city') city: string, @Query('limit') limit: number = 10) {
    return this.clubService.findByCity(city, limit);
  }

  @Get('type/:type')
  @ApiOperation({ summary: 'L·∫•y c√¢u l·∫°c b·ªô theo lo·∫°i' })
  @ApiParam({ name: 'type', description: 'Lo·∫°i c√¢u l·∫°c b·ªô' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'S·ªë l∆∞·ª£ng k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: 10)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch c√¢u l·∫°c b·ªô theo lo·∫°i',
    type: [Club]
  })
  async findByType(@Param('type') type: string, @Query('limit') limit: number = 10) {
    return this.clubService.findByType(type, limit);
  }

  @Get('code/:clubCode')
  @ApiOperation({ summary: 'L·∫•y c√¢u l·∫°c b·ªô theo m√£' })
  @ApiParam({ name: 'clubCode', description: 'M√£ c√¢u l·∫°c b·ªô' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin c√¢u l·∫°c b·ªô',
    type: Club
  })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async findByCode(@Param('clubCode') clubCode: string): Promise<Club> {
    return this.clubService.findByCode(clubCode);
  }

  @Get(':id')
  @ApiOperation({ summary: 'L·∫•y c√¢u l·∫°c b·ªô theo ID' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin c√¢u l·∫°c b·ªô',
    type: Club
  })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async findOne(@Param('id') id: string): Promise<Club> {
    return this.clubService.findOne(id);
  }

  @Patch(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t c√¢u l·∫°c b·ªô' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: Club
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string, 
    @Body() updateClubDto: UpdateClubDto
  ): Promise<Club> {
    return this.clubService.update(id, updateClubDto);
  }

  @Patch(':id/status')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'Thay ƒë·ªïi tr·∫°ng th√°i c√¢u l·∫°c b·ªô' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiResponse({ 
    status: 200, 
    description: 'Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng',
    type: Club
  })
  @ApiResponse({ status: 400, description: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async changeStatus(
    @Param('id') id: string, 
    @Body('status') status: ClubStatus
  ): Promise<Club> {
    return this.clubService.changeStatus(id, status);
  }

  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  @ApiOperation({ summary: 'X√≥a c√¢u l·∫°c b·ªô (x√≥a m·ªÅm)' })
  @ApiParam({ name: 'id', description: 'ID c·ªßa c√¢u l·∫°c b·ªô' })
  @ApiResponse({ status: 200, description: 'X√≥a th√†nh c√¥ng' })
  @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  @ApiResponse({ status: 404, description: 'C√¢u l·∫°c b·ªô kh√¥ng t·ªìn t·∫°i' })
  async remove(@Req() req, @Param('id') id: string): Promise<void> {
    return this.clubService.remove(id, req.user.userId);
  }
}
